{"ast":null,"code":"/*! p5.js v0.9.0 July 01, 2019 */\n\n/**\n * <p>The web is much more than just canvas and p5.dom makes it easy to interact\n * with other HTML5 objects, including text, hyperlink, image, input, video,\n * audio, and webcam.</p>\n * <p>There is a set of creation methods, DOM manipulation methods, and\n * an extended <a href=\"#/p5.Element\">p5.Element</a> that supports a range of HTML elements. See the\n * <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>\n * beyond the canvas tutorial</a> for a full overview of how this addon works.\n *\n * <p>Methods and properties shown in black are part of the p5.js core, items in\n * blue are part of the p5.dom library. You will need to include an extra file\n * in order to access the blue functions. See the\n * <a href='http://p5js.org/libraries/#using-a-library'>using a library</a>\n * section for information on how to include this library. p5.dom comes with\n * <a href='http://p5js.org/download'>p5 complete</a> or you can download the single file\n * <a href='https://raw.githubusercontent.com/lmccart/p5.js/master/lib/addons/p5.dom.js'>\n * here</a>.</p>\n * <p>See <a href='https://github.com/processing/p5.js/wiki/Beyond-the-canvas'>tutorial: beyond the canvas</a>\n * for more info on how to use this library.</a>\n *\n * @module p5.dom\n * @submodule p5.dom\n * @for p5\n * @main\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) define('p5.dom', ['p5'], function (p5) {\n    factory(p5);\n  });else if (typeof exports === 'object') factory(require('../p5'));else factory(root['p5']);\n})(this, function (p5) {\n  // =============================================================================\n  //                         p5 additions\n  // =============================================================================\n\n  /**\n   * Searches the page for an element with the given ID, class, or tag name (using the '#' or '.'\n   * prefixes to specify an ID or class respectively, and none for a tag) and returns it as\n   * a <a href=\"#/p5.Element\">p5.Element</a>. If a class or tag name is given with more than 1 element,\n   * only the first element will be returned.\n   * The DOM node itself can be accessed with .elt.\n   * Returns null if none found. You can also specify a container to search within.\n   *\n   * @method select\n   * @param  {String} name id, class, or tag name of element to search for\n   * @param  {String|p5.Element|HTMLElement} [container] id, <a href=\"#/p5.Element\">p5.Element</a>, or\n   *                                             HTML element to search within\n   * @return {p5.Element|null} <a href=\"#/p5.Element\">p5.Element</a> containing node found\n   * @example\n   * <div ><code class='norender'>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   //translates canvas 50px down\n   *   select('canvas').position(100, 100);\n   * }\n   * </code></div>\n   * <div><code class='norender'>\n   * // these are all valid calls to select()\n   * var a = select('#moo');\n   * var b = select('#blah', '#myContainer');\n   * var c, e;\n   * if (b) {\n   *   c = select('#foo', b);\n   * }\n   * var d = document.getElementById('beep');\n   * if (d) {\n   *   e = select('p', d);\n   * }\n   * [a, b, c, d, e]; // unused\n   * </code></div>\n   *\n   */\n  p5.prototype.select = function (e, p) {\n    p5._validateParameters('select', arguments);\n\n    var res = null;\n    var container = getContainer(p);\n\n    if (e[0] === '.') {\n      e = e.slice(1);\n      res = container.getElementsByClassName(e);\n\n      if (res.length) {\n        res = res[0];\n      } else {\n        res = null;\n      }\n    } else if (e[0] === '#') {\n      e = e.slice(1);\n      res = container.getElementById(e);\n    } else {\n      res = container.getElementsByTagName(e);\n\n      if (res.length) {\n        res = res[0];\n      } else {\n        res = null;\n      }\n    }\n\n    if (res) {\n      return this._wrapElement(res);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Searches the page for elements with the given class or tag name (using the '.' prefix\n   * to specify a class and no prefix for a tag) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s\n   * in an array.\n   * The DOM node itself can be accessed with .elt.\n   * Returns an empty array if none found.\n   * You can also specify a container to search within.\n   *\n   * @method selectAll\n   * @param  {String} name class or tag name of elements to search for\n   * @param  {String} [container] id, <a href=\"#/p5.Element\">p5.Element</a>, or HTML element to search within\n   * @return {p5.Element[]} Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found\n   * @example\n   * <div class='norender'><code>\n   * function setup() {\n   *   createButton('btn');\n   *   createButton('2nd btn');\n   *   createButton('3rd btn');\n   *   var buttons = selectAll('button');\n   *\n   *   for (var i = 0; i < buttons.length; i++) {\n   *     buttons[i].size(100, 100);\n   *   }\n   * }\n   * </code></div>\n   * <div class='norender'><code>\n   * // these are all valid calls to selectAll()\n   * var a = selectAll('.moo');\n   * a = selectAll('div');\n   * a = selectAll('button', '#myContainer');\n   *\n   * var d = select('#container');\n   * a = selectAll('p', d);\n   *\n   * var f = document.getElementById('beep');\n   * a = select('.blah', f);\n   *\n   * a; // unused\n   * </code></div>\n   *\n   */\n\n\n  p5.prototype.selectAll = function (e, p) {\n    p5._validateParameters('selectAll', arguments);\n\n    var arr = [];\n    var res;\n    var container = getContainer(p);\n\n    if (e[0] === '.') {\n      e = e.slice(1);\n      res = container.getElementsByClassName(e);\n    } else {\n      res = container.getElementsByTagName(e);\n    }\n\n    if (res) {\n      for (var j = 0; j < res.length; j++) {\n        var obj = this._wrapElement(res[j]);\n\n        arr.push(obj);\n      }\n    }\n\n    return arr;\n  };\n  /**\n   * Helper function for select and selectAll\n   */\n\n\n  function getContainer(p) {\n    var container = document;\n\n    if (typeof p === 'string' && p[0] === '#') {\n      p = p.slice(1);\n      container = document.getElementById(p) || document;\n    } else if (p instanceof p5.Element) {\n      container = p.elt;\n    } else if (p instanceof HTMLElement) {\n      container = p;\n    }\n\n    return container;\n  }\n  /**\n   * Helper function for getElement and getElements.\n   */\n\n\n  p5.prototype._wrapElement = function (elt) {\n    var children = Array.prototype.slice.call(elt.children);\n\n    if (elt.tagName === 'INPUT' && elt.type === 'checkbox') {\n      var converted = new p5.Element(elt, this);\n\n      converted.checked = function () {\n        if (arguments.length === 0) {\n          return this.elt.checked;\n        } else if (arguments[0]) {\n          this.elt.checked = true;\n        } else {\n          this.elt.checked = false;\n        }\n\n        return this;\n      };\n\n      return converted;\n    } else if (elt.tagName === 'VIDEO' || elt.tagName === 'AUDIO') {\n      return new p5.MediaElement(elt, this);\n    } else if (elt.tagName === 'SELECT') {\n      return this.createSelect(new p5.Element(elt, this));\n    } else if (children.length > 0 && children.every(function (c) {\n      return c.tagName === 'INPUT' || c.tagName === 'LABEL';\n    })) {\n      return this.createRadio(new p5.Element(elt, this));\n    } else {\n      return new p5.Element(elt, this);\n    }\n  };\n  /**\n   * Removes all elements created by p5, except any canvas / graphics\n   * elements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>.\n   * Event handlers are removed, and element is removed from the DOM.\n   * @method removeElements\n   * @example\n   * <div class='norender'><code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   createDiv('this is some text');\n   *   createP('this is a paragraph');\n   * }\n   * function mousePressed() {\n   *   removeElements(); // this will remove the div and p, not canvas\n   * }\n   * </code></div>\n   *\n   */\n\n\n  p5.prototype.removeElements = function (e) {\n    p5._validateParameters('removeElements', arguments);\n\n    for (var i = 0; i < this._elements.length; i++) {\n      if (!(this._elements[i].elt instanceof HTMLCanvasElement)) {\n        this._elements[i].remove();\n      }\n    }\n  };\n  /**\n   * The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an\n   * element changes.\n   * This can be used to attach an element specific event listener.\n   *\n   * @method changed\n   * @param  {Function|Boolean} fxn function to be fired when the value of\n   *                                an element changes.\n   *                                if `false` is passed instead, the previously\n   *                                firing function will no longer fire.\n   * @chainable\n   * @example\n   * <div><code>\n   * var sel;\n   *\n   * function setup() {\n   *   textAlign(CENTER);\n   *   background(200);\n   *   sel = createSelect();\n   *   sel.position(10, 10);\n   *   sel.option('pear');\n   *   sel.option('kiwi');\n   *   sel.option('grape');\n   *   sel.changed(mySelectEvent);\n   * }\n   *\n   * function mySelectEvent() {\n   *   var item = sel.value();\n   *   background(200);\n   *   text(\"it's a \" + item + '!', 50, 50);\n   * }\n   * </code></div>\n   *\n   * <div><code>\n   * var checkbox;\n   * var cnv;\n   *\n   * function setup() {\n   *   checkbox = createCheckbox(' fill');\n   *   checkbox.changed(changeFill);\n   *   cnv = createCanvas(100, 100);\n   *   cnv.position(0, 30);\n   *   noFill();\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *   ellipse(50, 50, 50, 50);\n   * }\n   *\n   * function changeFill() {\n   *   if (checkbox.checked()) {\n   *     fill(0);\n   *   } else {\n   *     noFill();\n   *   }\n   * }\n   * </code></div>\n   *\n   * @alt\n   * dropdown: pear, kiwi, grape. When selected text \"its a\" + selection shown.\n   *\n   */\n\n\n  p5.Element.prototype.changed = function (fxn) {\n    p5.Element._adjustListener('change', fxn, this);\n\n    return this;\n  };\n  /**\n   * The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is\n   * detected with an element. The input event is often used\n   * to detect keystrokes in a input element, or changes on a\n   * slider element. This can be used to attach an element specific\n   * event listener.\n   *\n   * @method input\n   * @param  {Function|Boolean} fxn function to be fired when any user input is\n   *                                detected within the element.\n   *                                if `false` is passed instead, the previously\n   *                                firing function will no longer fire.\n   * @chainable\n   * @example\n   * <div class='norender'><code>\n   * // Open your console to see the output\n   * function setup() {\n   *   var inp = createInput('');\n   *   inp.input(myInputEvent);\n   * }\n   *\n   * function myInputEvent() {\n   *   console.log('you are typing: ', this.value());\n   * }\n   * </code></div>\n   *\n   * @alt\n   * no display.\n   *\n   */\n\n\n  p5.Element.prototype.input = function (fxn) {\n    p5.Element._adjustListener('input', fxn, this);\n\n    return this;\n  };\n  /**\n   * Helpers for create methods.\n   */\n\n\n  function addElement(elt, pInst, media) {\n    var node = pInst._userNode ? pInst._userNode : document.body;\n    node.appendChild(elt);\n    var c = media ? new p5.MediaElement(elt, pInst) : new p5.Element(elt, pInst);\n\n    pInst._elements.push(c);\n\n    return c;\n  }\n  /**\n   * Creates a &lt;div&gt;&lt;/div&gt; element in the DOM with given inner HTML.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createDiv\n   * @param  {String} [html] inner HTML for element created\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * createDiv('this is some text');\n   * </code></div>\n   */\n\n  /**\n   * Creates a &lt;p&gt;&lt;/p&gt; element in the DOM with given inner HTML. Used\n   * for paragraph length text.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createP\n   * @param  {String} [html] inner HTML for element created\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * createP('this is some text');\n   * </code></div>\n   */\n\n  /**\n   * Creates a &lt;span&gt;&lt;/span&gt; element in the DOM with given inner HTML.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createSpan\n   * @param  {String} [html] inner HTML for element created\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * createSpan('this is some text');\n   * </code></div>\n   */\n\n\n  var tags = ['div', 'p', 'span'];\n  tags.forEach(function (tag) {\n    var method = 'create' + tag.charAt(0).toUpperCase() + tag.slice(1);\n\n    p5.prototype[method] = function (html) {\n      var elt = document.createElement(tag);\n      elt.innerHTML = typeof html === 'undefined' ? '' : html;\n      return addElement(elt, this);\n    };\n  });\n  /**\n   * Creates an &lt;img&gt; element in the DOM with given src and\n   * alternate text.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createImg\n   * @param  {String} src src path or url for image\n   * @param  {String} [alt] alternate text to be used if image does not load\n   * @param  {Function} [successCallback] callback to be called once image data is loaded\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * createImg('http://p5js.org/img/asterisk-01.png');\n   * </code></div>\n   */\n\n  /**\n   * @method createImg\n   * @param  {String} src\n   * @param  {Function} successCallback\n   * @return {Object|p5.Element}\n   */\n\n  p5.prototype.createImg = function () {\n    p5._validateParameters('createImg', arguments);\n\n    var elt = document.createElement('img');\n    elt.crossOrigin = 'Anonymous';\n    var args = arguments;\n    var self;\n\n    var setAttrs = function () {\n      self.width = elt.offsetWidth || elt.width;\n      self.height = elt.offsetHeight || elt.height;\n\n      if (args.length > 1 && typeof args[1] === 'function') {\n        self.fn = args[1];\n        self.fn();\n      } else if (args.length > 1 && typeof args[2] === 'function') {\n        self.fn = args[2];\n        self.fn();\n      }\n    };\n\n    elt.src = args[0];\n\n    if (args.length > 1 && typeof args[1] === 'string') {\n      elt.alt = args[1];\n    }\n\n    elt.onload = function () {\n      setAttrs();\n    };\n\n    self = addElement(elt, this);\n    return self;\n  };\n  /**\n   * Creates an &lt;a&gt;&lt;/a&gt; element in the DOM for including a hyperlink.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createA\n   * @param  {String} href       url of page to link to\n   * @param  {String} html       inner html of link element to display\n   * @param  {String} [target]   target where new link should open,\n   *                             could be _blank, _self, _parent, _top.\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * createA('http://p5js.org/', 'this is a link');\n   * </code></div>\n   */\n\n\n  p5.prototype.createA = function (href, html, target) {\n    p5._validateParameters('createA', arguments);\n\n    var elt = document.createElement('a');\n    elt.href = href;\n    elt.innerHTML = html;\n    if (target) elt.target = target;\n    return addElement(elt, this);\n  };\n  /** INPUT **/\n\n  /**\n   * Creates a slider &lt;input&gt;&lt;/input&gt; element in the DOM.\n   * Use .size() to set the display length of the slider.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createSlider\n   * @param  {Number} min minimum value of the slider\n   * @param  {Number} max maximum value of the slider\n   * @param  {Number} [value] default value of the slider\n   * @param  {Number} [step] step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div><code>\n   * var slider;\n   * function setup() {\n   *   slider = createSlider(0, 255, 100);\n   *   slider.position(10, 10);\n   *   slider.style('width', '80px');\n   * }\n   *\n   * function draw() {\n   *   var val = slider.value();\n   *   background(val);\n   * }\n   * </code></div>\n   *\n   * <div><code>\n   * var slider;\n   * function setup() {\n   *   colorMode(HSB);\n   *   slider = createSlider(0, 360, 60, 40);\n   *   slider.position(10, 10);\n   *   slider.style('width', '80px');\n   * }\n   *\n   * function draw() {\n   *   var val = slider.value();\n   *   background(val, 100, 100, 1);\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createSlider = function (min, max, value, step) {\n    p5._validateParameters('createSlider', arguments);\n\n    var elt = document.createElement('input');\n    elt.type = 'range';\n    elt.min = min;\n    elt.max = max;\n\n    if (step === 0) {\n      elt.step = 0.000000000000000001; // smallest valid step\n    } else if (step) {\n      elt.step = step;\n    }\n\n    if (typeof value === 'number') elt.value = value;\n    return addElement(elt, this);\n  };\n  /**\n   * Creates a &lt;button&gt;&lt;/button&gt; element in the DOM.\n   * Use .size() to set the display size of the button.\n   * Use .mousePressed() to specify behavior on press.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createButton\n   * @param  {String} label label displayed on the button\n   * @param  {String} [value] value of the button\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * var button;\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(0);\n   *   button = createButton('click me');\n   *   button.position(19, 19);\n   *   button.mousePressed(changeBG);\n   * }\n   *\n   * function changeBG() {\n   *   var val = random(255);\n   *   background(val);\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createButton = function (label, value) {\n    p5._validateParameters('createButton', arguments);\n\n    var elt = document.createElement('button');\n    elt.innerHTML = label;\n    if (value) elt.value = value;\n    return addElement(elt, this);\n  };\n  /**\n   * Creates a checkbox &lt;input&gt;&lt;/input&gt; element in the DOM.\n   * Calling .checked() on a checkbox returns if it is checked or not\n   *\n   * @method createCheckbox\n   * @param  {String} [label] label displayed after checkbox\n   * @param  {boolean} [value] value of the checkbox; checked is true, unchecked is false\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * var checkbox;\n   *\n   * function setup() {\n   *   checkbox = createCheckbox('label', false);\n   *   checkbox.changed(myCheckedEvent);\n   * }\n   *\n   * function myCheckedEvent() {\n   *   if (this.checked()) {\n   *     console.log('Checking!');\n   *   } else {\n   *     console.log('Unchecking!');\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createCheckbox = function () {\n    p5._validateParameters('createCheckbox', arguments);\n\n    var elt = document.createElement('div');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    elt.appendChild(checkbox); //checkbox must be wrapped in p5.Element before label so that label appears after\n\n    var self = addElement(elt, this);\n\n    self.checked = function () {\n      var cb = self.elt.getElementsByTagName('input')[0];\n\n      if (cb) {\n        if (arguments.length === 0) {\n          return cb.checked;\n        } else if (arguments[0]) {\n          cb.checked = true;\n        } else {\n          cb.checked = false;\n        }\n      }\n\n      return self;\n    };\n\n    this.value = function (val) {\n      self.value = val;\n      return this;\n    };\n\n    if (arguments[0]) {\n      var ran = Math.random().toString(36).slice(2);\n      var label = document.createElement('label');\n      checkbox.setAttribute('id', ran);\n      label.htmlFor = ran;\n      self.value(arguments[0]);\n      label.appendChild(document.createTextNode(arguments[0]));\n      elt.appendChild(label);\n    }\n\n    if (arguments[1]) {\n      checkbox.checked = true;\n    }\n\n    return self;\n  };\n  /**\n   * Creates a dropdown menu &lt;select&gt;&lt;/select&gt; element in the DOM.\n   * It also helps to assign select-box methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting existing select box\n   * @method createSelect\n   * @param {boolean} [multiple] true if dropdown should support multiple selections\n   * @return {p5.Element}\n   * @example\n   * <div><code>\n   * var sel;\n   *\n   * function setup() {\n   *   textAlign(CENTER);\n   *   background(200);\n   *   sel = createSelect();\n   *   sel.position(10, 10);\n   *   sel.option('pear');\n   *   sel.option('kiwi');\n   *   sel.option('grape');\n   *   sel.changed(mySelectEvent);\n   * }\n   *\n   * function mySelectEvent() {\n   *   var item = sel.value();\n   *   background(200);\n   *   text('It is a ' + item + '!', 50, 50);\n   * }\n   * </code></div>\n   */\n\n  /**\n   * @method createSelect\n   * @param {Object} existing DOM select element\n   * @return {p5.Element}\n   */\n\n\n  p5.prototype.createSelect = function () {\n    p5._validateParameters('createSelect', arguments);\n\n    var elt, self;\n    var arg = arguments[0];\n\n    if (typeof arg === 'object' && arg.elt.nodeName === 'SELECT') {\n      self = arg;\n      elt = this.elt = arg.elt;\n    } else {\n      elt = document.createElement('select');\n\n      if (arg && typeof arg === 'boolean') {\n        elt.setAttribute('multiple', 'true');\n      }\n\n      self = addElement(elt, this);\n    }\n\n    self.option = function (name, value) {\n      var index; //see if there is already an option with this name\n\n      for (var i = 0; i < this.elt.length; i++) {\n        if (this.elt[i].innerHTML === name) {\n          index = i;\n          break;\n        }\n      } //if there is an option with this name we will modify it\n\n\n      if (index !== undefined) {\n        //if the user passed in false then delete that option\n        if (value === false) {\n          this.elt.remove(index);\n        } else {\n          //otherwise if the name and value are the same then change both\n          if (this.elt[index].innerHTML === this.elt[index].value) {\n            this.elt[index].innerHTML = this.elt[index].value = value; //otherwise just change the value\n          } else {\n            this.elt[index].value = value;\n          }\n        }\n      } else {\n        //if it doesn't exist make it\n        var opt = document.createElement('option');\n        opt.innerHTML = name;\n        if (arguments.length > 1) opt.value = value;else opt.value = name;\n        elt.appendChild(opt);\n      }\n    };\n\n    self.selected = function (value) {\n      var arr = [],\n          i;\n\n      if (arguments.length > 0) {\n        for (i = 0; i < this.elt.length; i++) {\n          if (value.toString() === this.elt[i].value) {\n            this.elt.selectedIndex = i;\n          }\n        }\n\n        return this;\n      } else {\n        if (this.elt.getAttribute('multiple')) {\n          for (i = 0; i < this.elt.selectedOptions.length; i++) {\n            arr.push(this.elt.selectedOptions[i].value);\n          }\n\n          return arr;\n        } else {\n          return this.elt.value;\n        }\n      }\n    };\n\n    return self;\n  };\n  /**\n   * Creates a radio button &lt;input&gt;&lt;/input&gt; element in the DOM.\n   * The .option() method can be used to set options for the radio after it is\n   * created. The .value() method will return the currently selected option.\n   *\n   * @method createRadio\n   * @param  {String} [divId] the id and name of the created div and input field respectively\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div><code>\n   * var radio;\n   *\n   * function setup() {\n   *   radio = createRadio();\n   *   radio.option('black');\n   *   radio.option('white');\n   *   radio.option('gray');\n   *   radio.style('width', '60px');\n   *   textAlign(CENTER);\n   *   fill(255, 0, 0);\n   * }\n   *\n   * function draw() {\n   *   var val = radio.value();\n   *   background(val);\n   *   text(val, width / 2, height / 2);\n   * }\n   * </code></div>\n   * <div><code>\n   * var radio;\n   *\n   * function setup() {\n   *   radio = createRadio();\n   *   radio.option('apple', 1);\n   *   radio.option('bread', 2);\n   *   radio.option('juice', 3);\n   *   radio.style('width', '60px');\n   *   textAlign(CENTER);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *   var val = radio.value();\n   *   if (val) {\n   *     text('item cost is $' + val, width / 2, height / 2);\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createRadio = function (existing_radios) {\n    p5._validateParameters('createRadio', arguments); // do some prep by counting number of radios on page\n\n\n    var radios = document.querySelectorAll('input[type=radio]');\n    var count = 0;\n\n    if (radios.length > 1) {\n      var length = radios.length;\n      var prev = radios[0].name;\n      var current = radios[1].name;\n      count = 1;\n\n      for (var i = 1; i < length; i++) {\n        current = radios[i].name;\n\n        if (prev !== current) {\n          count++;\n        }\n\n        prev = current;\n      }\n    } else if (radios.length === 1) {\n      count = 1;\n    } // see if we got an existing set of radios from callee\n\n\n    var elt, self;\n\n    if (typeof existing_radios === 'object') {\n      // use existing elements\n      self = existing_radios;\n      elt = this.elt = existing_radios.elt;\n    } else {\n      // create a set of radio buttons\n      elt = document.createElement('div');\n      self = addElement(elt, this);\n    } // setup member functions\n\n\n    self._getInputChildrenArray = function () {\n      return Array.prototype.slice.call(this.elt.children).filter(function (c) {\n        return c.tagName === 'INPUT';\n      });\n    };\n\n    var times = -1;\n\n    self.option = function (name, value) {\n      var opt = document.createElement('input');\n      opt.type = 'radio';\n      opt.innerHTML = name;\n      if (value) opt.value = value;else opt.value = name;\n      opt.setAttribute('name', 'defaultradio' + count);\n      elt.appendChild(opt);\n\n      if (name) {\n        times++;\n        var label = document.createElement('label');\n        opt.setAttribute('id', 'defaultradio' + count + '-' + times);\n        label.htmlFor = 'defaultradio' + count + '-' + times;\n        label.appendChild(document.createTextNode(name));\n        elt.appendChild(label);\n      }\n\n      return opt;\n    };\n\n    self.selected = function (value) {\n      var i;\n\n      var inputChildren = self._getInputChildrenArray();\n\n      if (value) {\n        for (i = 0; i < inputChildren.length; i++) {\n          if (inputChildren[i].value === value) inputChildren[i].checked = true;\n        }\n\n        return this;\n      } else {\n        for (i = 0; i < inputChildren.length; i++) {\n          if (inputChildren[i].checked === true) return inputChildren[i].value;\n        }\n      }\n    };\n\n    self.value = function (value) {\n      var i;\n\n      var inputChildren = self._getInputChildrenArray();\n\n      if (value) {\n        for (i = 0; i < inputChildren.length; i++) {\n          if (inputChildren[i].value === value) inputChildren[i].checked = true;\n        }\n\n        return this;\n      } else {\n        for (i = 0; i < inputChildren.length; i++) {\n          if (inputChildren[i].checked === true) return inputChildren[i].value;\n        }\n\n        return '';\n      }\n    };\n\n    return self;\n  };\n  /**\n   * Creates a colorPicker element in the DOM for color input.\n   * The .value() method will return a hex string (#rrggbb) of the color.\n   * The .color() method will return a p5.Color object with the current chosen color.\n   *\n   * @method createColorPicker\n   * @param {String|p5.Color} [value] default color of element\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div>\n   * <code>\n   * var inp1, inp2;\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background('grey');\n   *   inp1 = createColorPicker('#ff0000');\n   *   inp2 = createColorPicker(color('yellow'));\n   *   inp1.input(setShade1);\n   *   inp2.input(setShade2);\n   *   setMidShade();\n   * }\n   *\n   * function setMidShade() {\n   *   // Finding a shade between the two\n   *   var commonShade = lerpColor(inp1.color(), inp2.color(), 0.5);\n   *   fill(commonShade);\n   *   rect(20, 20, 60, 60);\n   * }\n   *\n   * function setShade1() {\n   *   setMidShade();\n   *   console.log('You are choosing shade 1 to be : ', this.value());\n   * }\n   * function setShade2() {\n   *   setMidShade();\n   *   console.log('You are choosing shade 2 to be : ', this.value());\n   * }\n   * </code>\n   * </div>\n   */\n\n\n  p5.prototype.createColorPicker = function (value) {\n    p5._validateParameters('createColorPicker', arguments);\n\n    var elt = document.createElement('input');\n    var self;\n    elt.type = 'color';\n\n    if (value) {\n      if (value instanceof p5.Color) {\n        elt.value = value.toString('#rrggbb');\n      } else {\n        p5.prototype._colorMode = 'rgb';\n        p5.prototype._colorMaxes = {\n          rgb: [255, 255, 255, 255],\n          hsb: [360, 100, 100, 1],\n          hsl: [360, 100, 100, 1]\n        };\n        elt.value = p5.prototype.color(value).toString('#rrggbb');\n      }\n    } else {\n      elt.value = '#000000';\n    }\n\n    self = addElement(elt, this); // Method to return a p5.Color object for the given color.\n\n    self.color = function () {\n      if (value.mode) {\n        p5.prototype._colorMode = value.mode;\n      }\n\n      if (value.maxes) {\n        p5.prototype._colorMaxes = value.maxes;\n      }\n\n      return p5.prototype.color(this.elt.value);\n    };\n\n    return self;\n  };\n  /**\n   * Creates an &lt;input&gt;&lt;/input&gt; element in the DOM for text input.\n   * Use .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createInput\n   * @param {String} [value] default value of the input box\n   * @param {String} [type] type of text, ie text, password etc. Defaults to text\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * function setup() {\n   *   var inp = createInput('');\n   *   inp.input(myInputEvent);\n   * }\n   *\n   * function myInputEvent() {\n   *   console.log('you are typing: ', this.value());\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createInput = function (value, type) {\n    p5._validateParameters('createInput', arguments);\n\n    var elt = document.createElement('input');\n    elt.type = type ? type : 'text';\n    if (value) elt.value = value;\n    return addElement(elt, this);\n  };\n  /**\n   * Creates an &lt;input&gt;&lt;/input&gt; element in the DOM of type 'file'.\n   * This allows users to select local files for use in a sketch.\n   *\n   * @method createFileInput\n   * @param  {Function} [callback] callback function for when a file loaded\n   * @param  {String} [multiple] optional to allow multiple files selected\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element\n   * @example\n   * <div><code>\n   * let input;\n   * let img;\n   *\n   * function setup() {\n   *   input = createFileInput(handleFile);\n   *   input.position(0, 0);\n   * }\n   *\n   * function draw() {\n   *   background(255);\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * function handleFile(file) {\n   *   print(file);\n   *   if (file.type === 'image') {\n   *     img = createImg(file.data);\n   *     img.hide();\n   *   } else {\n   *     img = null;\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createFileInput = function (callback, multiple) {\n    p5._validateParameters('createFileInput', arguments); // Function to handle when a file is selected\n    // We're simplifying life and assuming that we always\n    // want to load every selected file\n\n\n    function handleFileSelect(evt) {\n      // These are the files\n      var files = evt.target.files; // Load each one and trigger a callback\n\n      for (var i = 0; i < files.length; i++) {\n        var f = files[i];\n\n        p5.File._load(f, callback);\n      }\n    } // Is the file stuff supported?\n\n\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      // Yup, we're ok and make an input file selector\n      var elt = document.createElement('input');\n      elt.type = 'file'; // If we get a second argument that evaluates to true\n      // then we are looking for multiple files\n\n      if (multiple) {\n        // Anything gets the job done\n        elt.multiple = 'multiple';\n      } // Now let's handle when a file was selected\n\n\n      elt.addEventListener('change', handleFileSelect, false);\n      return addElement(elt, this);\n    } else {\n      console.log('The File APIs are not fully supported in this browser. Cannot create element.');\n    }\n  };\n  /** VIDEO STUFF **/\n\n\n  function createMedia(pInst, type, src, callback) {\n    var elt = document.createElement(type); // allow src to be empty\n\n    src = src || '';\n\n    if (typeof src === 'string') {\n      src = [src];\n    }\n\n    for (var i = 0; i < src.length; i++) {\n      var source = document.createElement('source');\n      source.src = src[i];\n      elt.appendChild(source);\n    }\n\n    if (typeof callback !== 'undefined') {\n      var callbackHandler = function () {\n        callback();\n        elt.removeEventListener('canplaythrough', callbackHandler);\n      };\n\n      elt.addEventListener('canplaythrough', callbackHandler);\n    }\n\n    var c = addElement(elt, pInst, true);\n    c.loadedmetadata = false; // set width and height onload metadata\n\n    elt.addEventListener('loadedmetadata', function () {\n      c.width = elt.videoWidth;\n      c.height = elt.videoHeight; //c.elt.playbackRate = s;\n      // set elt width and height if not set\n\n      if (c.elt.width === 0) c.elt.width = elt.videoWidth;\n      if (c.elt.height === 0) c.elt.height = elt.videoHeight;\n\n      if (c.presetPlaybackRate) {\n        c.elt.playbackRate = c.presetPlaybackRate;\n        delete c.presetPlaybackRate;\n      }\n\n      c.loadedmetadata = true;\n    });\n    return c;\n  }\n  /**\n   * Creates an HTML5 &lt;video&gt; element in the DOM for simple playback\n   * of audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a>\n   * and drawn into canvas using video(). Appends to the container\n   * node if one is specified, otherwise appends to body. The first parameter\n   * can be either a single string path to a video file, or an array of string\n   * paths to different formats of the same video. This is useful for ensuring\n   * that your video can play across different browsers, as each supports\n   * different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\n   * page</a> for further information about supported formats.\n   *\n   * @method createVideo\n   * @param  {String|String[]} src path to a video file, or array of paths for\n   *                             supporting different browsers\n   * @param  {Function} [callback] callback function to be called upon\n   *                             'canplaythrough' event fire, that is, when the\n   *                             browser can play the media, and estimates that\n   *                             enough data has been loaded to play the media\n   *                             up to its end without having to stop for\n   *                             further buffering of content\n   * @return {p5.MediaElement}   pointer to video <a href=\"#/p5.Element\">p5.Element</a>\n   * @example\n   * <div><code>\n   * var vid;\n   * function setup() {\n   *   noCanvas();\n   *\n   *   vid = createVideo(\n   *     ['assets/small.mp4', 'assets/small.ogv', 'assets/small.webm'],\n   *     vidLoad\n   *   );\n   *\n   *   vid.size(100, 100);\n   * }\n   *\n   * // This function is called when the video loads\n   * function vidLoad() {\n   *   vid.loop();\n   *   vid.volume(0);\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createVideo = function (src, callback) {\n    p5._validateParameters('createVideo', arguments);\n\n    return createMedia(this, 'video', src, callback);\n  };\n  /** AUDIO STUFF **/\n\n  /**\n   * Creates a hidden HTML5 &lt;audio&gt; element in the DOM for simple audio\n   * playback. Appends to the container node if one is specified,\n   * otherwise appends to body. The first parameter\n   * can be either a single string path to a audio file, or an array of string\n   * paths to different formats of the same audio. This is useful for ensuring\n   * that your audio can play across different browsers, as each supports\n   * different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this\n   * page for further information about supported formats</a>.\n   *\n   * @method createAudio\n   * @param  {String|String[]} [src] path to an audio file, or array of paths\n   *                             for supporting different browsers\n   * @param  {Function} [callback] callback function to be called upon\n   *                             'canplaythrough' event fire, that is, when the\n   *                             browser can play the media, and estimates that\n   *                             enough data has been loaded to play the media\n   *                             up to its end without having to stop for\n   *                             further buffering of content\n   * @return {p5.MediaElement}   pointer to audio <a href=\"#/p5.Element\">p5.Element</a>\n   * @example\n   * <div><code>\n   * var ele;\n   * function setup() {\n   *   ele = createAudio('assets/beat.mp3');\n   *\n   *   // here we set the element to autoplay\n   *   // The element will play as soon\n   *   // as it is able to do so.\n   *   ele.autoplay(true);\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createAudio = function (src, callback) {\n    p5._validateParameters('createAudio', arguments);\n\n    return createMedia(this, 'audio', src, callback);\n  };\n  /** CAMERA STUFF **/\n\n  /**\n   * @property {String} VIDEO\n   * @final\n   * @category Constants\n   */\n\n\n  p5.prototype.VIDEO = 'video';\n  /**\n   * @property {String} AUDIO\n   * @final\n   * @category Constants\n   */\n\n  p5.prototype.AUDIO = 'audio'; // from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  } // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia; // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n\n      if (!getUserMedia) {\n        return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n      } // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n\n\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  }\n  /**\n   * <p>Creates a new HTML5 &lt;video&gt; element that contains the audio/video\n   * feed from a webcam. The element is separate from the canvas and is\n   * displayed by default. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>. The feed\n   * can be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>. The loadedmetadata property can\n   * be used to detect when the element has fully loaded (see second example).</p>\n   * <p>More specific properties of the feed can be passing in a Constraints object.\n   * See the\n   * <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'> W3C\n   * spec</a> for possible properties. Note that not all of these are supported\n   * by all browsers.</p>\n   * <p>Security note: A new browser security specification requires that getUserMedia,\n   * which is behind <a href=\"#/p5/createCapture\">createCapture()</a>, only works when you're running the code locally,\n   * or on HTTPS. Learn more <a href='http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>here</a>\n   * and <a href='https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>here</a>.</p>\n   *\n   * @method createCapture\n   * @param  {String|Constant|Object}   type type of capture, either VIDEO or\n   *                                   AUDIO if none specified, default both,\n   *                                   or a Constraints object\n   * @param  {Function}                 [callback] function to be called once\n   *                                   stream has loaded\n   * @return {p5.Element} capture video <a href=\"#/p5.Element\">p5.Element</a>\n   * @example\n   * <div class='norender notest'><code>\n   * var capture;\n   *\n   * function setup() {\n   *   createCanvas(480, 480);\n   *   capture = createCapture(VIDEO);\n   *   capture.hide();\n   * }\n   *\n   * function draw() {\n   *   image(capture, 0, 0, width, width * capture.height / capture.width);\n   *   filter(INVERT);\n   * }\n   * </code></div>\n   * <div class='norender notest'><code>\n   * function setup() {\n   *   createCanvas(480, 120);\n   *   var constraints = {\n   *     video: {\n   *       mandatory: {\n   *         minWidth: 1280,\n   *         minHeight: 720\n   *       },\n   *       optional: [{ maxFrameRate: 10 }]\n   *     },\n   *     audio: true\n   *   };\n   *   createCapture(constraints, function(stream) {\n   *     console.log(stream);\n   *   });\n   * }\n   * </code></div>\n   * <code><div class='norender notest'>\n   * var capture;\n   *\n   * function setup() {\n   *   createCanvas(640, 480);\n   *   capture = createCapture(VIDEO);\n   * }\n   * function draw() {\n   *   background(0);\n   *   if (capture.loadedmetadata) {\n   *     var c = capture.get(0, 0, 100, 100);\n   *     image(c, 0, 0);\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.prototype.createCapture = function () {\n    p5._validateParameters('createCapture', arguments);\n\n    var useVideo = true;\n    var useAudio = true;\n    var constraints;\n    var cb;\n\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] === p5.prototype.VIDEO) {\n        useAudio = false;\n      } else if (arguments[i] === p5.prototype.AUDIO) {\n        useVideo = false;\n      } else if (typeof arguments[i] === 'object') {\n        constraints = arguments[i];\n      } else if (typeof arguments[i] === 'function') {\n        cb = arguments[i];\n      }\n    }\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      var elt = document.createElement('video'); // required to work in iOS 11 & up:\n\n      elt.setAttribute('playsinline', '');\n\n      if (!constraints) {\n        constraints = {\n          video: useVideo,\n          audio: useAudio\n        };\n      }\n\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        try {\n          if ('srcObject' in elt) {\n            elt.srcObject = stream;\n          } else {\n            elt.src = window.URL.createObjectURL(stream);\n          }\n        } catch (err) {\n          elt.src = stream;\n        }\n      }, function (e) {\n        console.log(e);\n      });\n    } else {\n      throw 'getUserMedia not supported in this browser';\n    }\n\n    var c = addElement(elt, this, true);\n    c.loadedmetadata = false; // set width and height onload metadata\n\n    elt.addEventListener('loadedmetadata', function () {\n      elt.play();\n\n      if (elt.width) {\n        c.width = elt.videoWidth = elt.width;\n        c.height = elt.videoHeight = elt.height;\n      } else {\n        c.width = c.elt.width = elt.videoWidth;\n        c.height = c.elt.height = elt.videoHeight;\n      }\n\n      c.loadedmetadata = true;\n\n      if (cb) {\n        cb(elt.srcObject);\n      }\n    });\n    return c;\n  };\n  /**\n   * Creates element with given tag in the DOM with given content.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createElement\n   * @param  {String} tag tag for the new element\n   * @param  {String} [content] html content to be inserted into the element\n   * @return {p5.Element} pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node\n   * @example\n   * <div class='norender'><code>\n   * createElement('h2', 'im an h2 p5.element!');\n   * </code></div>\n   */\n\n\n  p5.prototype.createElement = function (tag, content) {\n    p5._validateParameters('createElement', arguments);\n\n    var elt = document.createElement(tag);\n\n    if (typeof content !== 'undefined') {\n      elt.innerHTML = content;\n    }\n\n    return addElement(elt, this);\n  }; // =============================================================================\n  //                         p5.Element additions\n  // =============================================================================\n\n  /**\n   *\n   * Adds specified class to the element.\n   *\n   * @for p5.Element\n   * @method addClass\n   * @param  {String} class name of class to add\n   * @chainable\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('div');\n   * div.addClass('myClass');\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.addClass = function (c) {\n    if (this.elt.className) {\n      if (!this.hasClass(c)) {\n        this.elt.className = this.elt.className + ' ' + c;\n      }\n    } else {\n      this.elt.className = c;\n    }\n\n    return this;\n  };\n  /**\n   *\n   * Removes specified class from the element.\n   *\n   * @method removeClass\n   * @param  {String} class name of class to remove\n   * @chainable\n   * @example\n   * <div class='norender'><code>\n   * // In this example, a class is set when the div is created\n   * // and removed when mouse is pressed. This could link up\n   * // with a CSS style rule to toggle style properties.\n   *\n   * var div;\n   *\n   * function setup() {\n   *   div = createDiv('div');\n   *   div.addClass('myClass');\n   * }\n   *\n   * function mousePressed() {\n   *   div.removeClass('myClass');\n   * }\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.removeClass = function (c) {\n    // Note: Removing a class that does not exist does NOT throw an error in classList.remove method\n    this.elt.classList.remove(c);\n    return this;\n  };\n  /**\n   *\n   * Checks if specified class already set to element\n   *\n   * @method hasClass\n   * @returns {boolean} a boolean value if element has specified class\n   * @param c {String} class name of class to check\n   * @example\n   * <div class='norender'><code>\n   * var div;\n   *\n   * function setup() {\n   *   div = createDiv('div');\n   *   div.addClass('show');\n   * }\n   *\n   * function mousePressed() {\n   *   if (div.hasClass('show')) {\n   *     div.addClass('show');\n   *   } else {\n   *     div.removeClass('show');\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.hasClass = function (c) {\n    return this.elt.classList.contains(c);\n  };\n  /**\n   *\n   * Toggles element class\n   *\n   * @method toggleClass\n   * @param c {String} class name to toggle\n   * @chainable\n   * @example\n   * <div class='norender'><code>\n   * var div;\n   *\n   * function setup() {\n   *   div = createDiv('div');\n   *   div.addClass('show');\n   * }\n   *\n   * function mousePressed() {\n   *   div.toggleClass('show');\n   * }\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.toggleClass = function (c) {\n    // classList also has a toggle() method, but we cannot use that yet as support is unclear.\n    // See https://github.com/processing/p5.js/issues/3631\n    // this.elt.classList.toggle(c);\n    if (this.elt.classList.contains(c)) {\n      this.elt.classList.remove(c);\n    } else {\n      this.elt.classList.add(c);\n    }\n\n    return this;\n  };\n  /**\n   *\n   * Attaches the element  as a child to the parent specified.\n   * Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.\n   * If no argument is specified, an array of children DOM nodes is returned.\n   *\n   * @method child\n   * @returns {Node[]} an array of child nodes\n   * @example\n   * <div class='norender'><code>\n   * var div0 = createDiv('this is the parent');\n   * var div1 = createDiv('this is the child');\n   * div0.child(div1); // use p5.Element\n   * </code></div>\n   * <div class='norender'><code>\n   * var div0 = createDiv('this is the parent');\n   * var div1 = createDiv('this is the child');\n   * div1.id('apples');\n   * div0.child('apples'); // use id\n   * </code></div>\n   * <div class='norender notest'><code>\n   * // this example assumes there is a div already on the page\n   * // with id \"myChildDiv\"\n   * var div0 = createDiv('this is the parent');\n   * var elt = document.getElementById('myChildDiv');\n   * div0.child(elt); // use element from page\n   * </code></div>\n   */\n\n  /**\n   * @method child\n   * @param  {String|p5.Element} [child] the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n   *                         to add to the current element\n   * @chainable\n   */\n\n\n  p5.Element.prototype.child = function (c) {\n    if (typeof c === 'undefined') {\n      return this.elt.childNodes;\n    }\n\n    if (typeof c === 'string') {\n      if (c[0] === '#') {\n        c = c.substring(1);\n      }\n\n      c = document.getElementById(c);\n    } else if (c instanceof p5.Element) {\n      c = c.elt;\n    }\n\n    this.elt.appendChild(c);\n    return this;\n  };\n  /**\n   * Centers a p5 Element either vertically, horizontally,\n   * or both, relative to its parent or according to\n   * the body if the Element has no parent. If no argument is passed\n   * the Element is aligned both vertically and horizontally.\n   *\n   * @method center\n   * @param  {String} [align]       passing 'vertical', 'horizontal' aligns element accordingly\n   * @chainable\n   *\n   * @example\n   * <div><code>\n   * function setup() {\n   *   var div = createDiv('').size(10, 10);\n   *   div.style('background-color', 'orange');\n   *   div.center();\n   * }\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.center = function (align) {\n    var style = this.elt.style.display;\n    var hidden = this.elt.style.display === 'none';\n    var parentHidden = this.parent().style.display === 'none';\n    var pos = {\n      x: this.elt.offsetLeft,\n      y: this.elt.offsetTop\n    };\n    if (hidden) this.show();\n    this.elt.style.display = 'block';\n    this.position(0, 0);\n    if (parentHidden) this.parent().style.display = 'block';\n    var wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);\n    var hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);\n    var y = pos.y;\n    var x = pos.x;\n\n    if (align === 'both' || align === undefined) {\n      this.position(wOffset / 2, hOffset / 2);\n    } else if (align === 'horizontal') {\n      this.position(wOffset / 2, y);\n    } else if (align === 'vertical') {\n      this.position(x, hOffset / 2);\n    }\n\n    this.style('display', style);\n    if (hidden) this.hide();\n    if (parentHidden) this.parent().style.display = 'none';\n    return this;\n  };\n  /**\n   *\n   * If an argument is given, sets the inner HTML of the element,\n   * replacing any existing html. If true is included as a second\n   * argument, html is appended instead of replacing existing html.\n   * If no arguments are given, returns\n   * the inner HTML of the element.\n   *\n   * @for p5.Element\n   * @method html\n   * @returns {String} the inner HTML of the element\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('').size(100, 100);\n   * div.html('hi');\n   * </code></div>\n   * <div class='norender'><code>\n   * var div = createDiv('Hello ').size(100, 100);\n   * div.html('World', true);\n   * </code></div>\n   */\n\n  /**\n   * @method html\n   * @param  {String} [html] the HTML to be placed inside the element\n   * @param  {boolean} [append] whether to append HTML to existing\n   * @chainable\n   */\n\n\n  p5.Element.prototype.html = function () {\n    if (arguments.length === 0) {\n      return this.elt.innerHTML;\n    } else if (arguments[1]) {\n      this.elt.innerHTML += arguments[0];\n      return this;\n    } else {\n      this.elt.innerHTML = arguments[0];\n      return this;\n    }\n  };\n  /**\n   *\n   * Sets the position of the element relative to (0, 0) of the\n   * window. Essentially, sets position:absolute and left and top\n   * properties of style. If no arguments given returns the x and y position\n   * of the element in an object.\n   *\n   * @method position\n   * @returns {Object} the x and y position of the element in an object\n   * @example\n   * <div><code class='norender'>\n   * function setup() {\n   *   var cnv = createCanvas(100, 100);\n   *   // positions canvas 50px to the right and 100px\n   *   // below upper left corner of the window\n   *   cnv.position(50, 100);\n   * }\n   * </code></div>\n   */\n\n  /**\n   * @method position\n   * @param  {Number} [x] x-position relative to upper left of window\n   * @param  {Number} [y] y-position relative to upper left of window\n   * @chainable\n   */\n\n\n  p5.Element.prototype.position = function () {\n    if (arguments.length === 0) {\n      return {\n        x: this.elt.offsetLeft,\n        y: this.elt.offsetTop\n      };\n    } else {\n      this.elt.style.position = 'absolute';\n      this.elt.style.left = arguments[0] + 'px';\n      this.elt.style.top = arguments[1] + 'px';\n      this.x = arguments[0];\n      this.y = arguments[1];\n      return this;\n    }\n  };\n  /* Helper method called by p5.Element.style() */\n\n\n  p5.Element.prototype._translate = function () {\n    this.elt.style.position = 'absolute'; // save out initial non-translate transform styling\n\n    var transform = '';\n\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/translate3d\\(.*\\)/g, '');\n      transform = transform.replace(/translate[X-Z]?\\(.*\\)/g, '');\n    }\n\n    if (arguments.length === 2) {\n      this.elt.style.transform = 'translate(' + arguments[0] + 'px, ' + arguments[1] + 'px)';\n    } else if (arguments.length > 2) {\n      this.elt.style.transform = 'translate3d(' + arguments[0] + 'px,' + arguments[1] + 'px,' + arguments[2] + 'px)';\n\n      if (arguments.length === 3) {\n        this.elt.parentElement.style.perspective = '1000px';\n      } else {\n        this.elt.parentElement.style.perspective = arguments[3] + 'px';\n      }\n    } // add any extra transform styling back on end\n\n\n    this.elt.style.transform += transform;\n    return this;\n  };\n  /* Helper method called by p5.Element.style() */\n\n\n  p5.Element.prototype._rotate = function () {\n    // save out initial non-rotate transform styling\n    var transform = '';\n\n    if (this.elt.style.transform) {\n      transform = this.elt.style.transform.replace(/rotate3d\\(.*\\)/g, '');\n      transform = transform.replace(/rotate[X-Z]?\\(.*\\)/g, '');\n    }\n\n    if (arguments.length === 1) {\n      this.elt.style.transform = 'rotate(' + arguments[0] + 'deg)';\n    } else if (arguments.length === 2) {\n      this.elt.style.transform = 'rotate(' + arguments[0] + 'deg, ' + arguments[1] + 'deg)';\n    } else if (arguments.length === 3) {\n      this.elt.style.transform = 'rotateX(' + arguments[0] + 'deg)';\n      this.elt.style.transform += 'rotateY(' + arguments[1] + 'deg)';\n      this.elt.style.transform += 'rotateZ(' + arguments[2] + 'deg)';\n    } // add remaining transform back on\n\n\n    this.elt.style.transform += transform;\n    return this;\n  };\n  /**\n   * Sets the given style (css) property (1st arg) of the element with the\n   * given value (2nd arg). If a single argument is given, .style()\n   * returns the value of the given property; however, if the single argument\n   * is given in css syntax ('text-align:center'), .style() sets the css\n   * appropriately.\n   *\n   * @method style\n   * @param  {String} property   property to be set\n   * @returns {String} value of property\n   * @example\n   * <div><code class='norender'>\n   * var myDiv = createDiv('I like pandas.');\n   * myDiv.style('font-size', '18px');\n   * myDiv.style('color', '#ff0000');\n   * </code></div>\n   * <div><code class='norender'>\n   * var col = color(25, 23, 200, 50);\n   * var button = createButton('button');\n   * button.style('background-color', col);\n   * button.position(10, 10);\n   * </code></div>\n   * <div><code class='norender'>\n   * var myDiv;\n   * function setup() {\n   *   background(200);\n   *   myDiv = createDiv('I like gray.');\n   *   myDiv.position(20, 20);\n   * }\n   *\n   * function draw() {\n   *   myDiv.style('font-size', mouseX + 'px');\n   * }\n   * </code></div>\n   */\n\n  /**\n   * @method style\n   * @param  {String} property\n   * @param  {String|Number|p5.Color} value     value to assign to property\n   * @return {String} current value of property, if no value is given as second argument\n   * @chainable\n   */\n\n\n  p5.Element.prototype.style = function (prop, val) {\n    var self = this;\n\n    if (val instanceof p5.Color) {\n      val = 'rgba(' + val.levels[0] + ',' + val.levels[1] + ',' + val.levels[2] + ',' + val.levels[3] / 255 + ')';\n    }\n\n    if (typeof val === 'undefined') {\n      // input provided as single line string\n      if (prop.indexOf(':') === -1) {\n        var styles = window.getComputedStyle(self.elt);\n        var style = styles.getPropertyValue(prop);\n        return style;\n      } else {\n        var attrs = prop.split(';');\n\n        for (var i = 0; i < attrs.length; i++) {\n          var parts = attrs[i].split(':');\n\n          if (parts[0] && parts[1]) {\n            this.elt.style[parts[0].trim()] = parts[1].trim();\n          }\n        }\n      }\n    } else {\n      // input provided as key,val pair\n      this.elt.style[prop] = val;\n\n      if (prop === 'width' || prop === 'height' || prop === 'left' || prop === 'top') {\n        var numVal = val.replace(/\\D+/g, '');\n        this[prop] = parseInt(numVal, 10);\n      }\n    }\n\n    return this;\n  };\n  /**\n   *\n   * Adds a new attribute or changes the value of an existing attribute\n   * on the specified element. If no value is specified, returns the\n   * value of the given attribute, or null if attribute is not set.\n   *\n   * @method attribute\n   * @return {String} value of attribute\n   *\n   * @example\n   * <div class='norender'><code>\n   * var myDiv = createDiv('I like pandas.');\n   * myDiv.attribute('align', 'center');\n   * </code></div>\n   */\n\n  /**\n   * @method attribute\n   * @param  {String} attr       attribute to set\n   * @param  {String} value      value to assign to attribute\n   * @chainable\n   */\n\n\n  p5.Element.prototype.attribute = function (attr, value) {\n    //handling for checkboxes and radios to ensure options get\n    //attributes not divs\n    if (this.elt.firstChild != null && (this.elt.firstChild.type === 'checkbox' || this.elt.firstChild.type === 'radio')) {\n      if (typeof value === 'undefined') {\n        return this.elt.firstChild.getAttribute(attr);\n      } else {\n        for (var i = 0; i < this.elt.childNodes.length; i++) {\n          this.elt.childNodes[i].setAttribute(attr, value);\n        }\n      }\n    } else if (typeof value === 'undefined') {\n      return this.elt.getAttribute(attr);\n    } else {\n      this.elt.setAttribute(attr, value);\n      return this;\n    }\n  };\n  /**\n   *\n   * Removes an attribute on the specified element.\n   *\n   * @method removeAttribute\n   * @param  {String} attr       attribute to remove\n   * @chainable\n   *\n   * @example\n   * <div><code>\n   * var button;\n   * var checkbox;\n   *\n   * function setup() {\n   *   checkbox = createCheckbox('enable', true);\n   *   checkbox.changed(enableButton);\n   *   button = createButton('button');\n   *   button.position(10, 10);\n   * }\n   *\n   * function enableButton() {\n   *   if (this.checked()) {\n   *     // Re-enable the button\n   *     button.removeAttribute('disabled');\n   *   } else {\n   *     // Disable the button\n   *     button.attribute('disabled', '');\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.removeAttribute = function (attr) {\n    if (this.elt.firstChild != null && (this.elt.firstChild.type === 'checkbox' || this.elt.firstChild.type === 'radio')) {\n      for (var i = 0; i < this.elt.childNodes.length; i++) {\n        this.elt.childNodes[i].removeAttribute(attr);\n      }\n    }\n\n    this.elt.removeAttribute(attr);\n    return this;\n  };\n  /**\n   * Either returns the value of the element if no arguments\n   * given, or sets the value of the element.\n   *\n   * @method value\n   * @return {String|Number} value of the element\n   * @example\n   * <div class='norender'><code>\n   * // gets the value\n   * var inp;\n   * function setup() {\n   *   inp = createInput('');\n   * }\n   *\n   * function mousePressed() {\n   *   print(inp.value());\n   * }\n   * </code></div>\n   * <div class='norender'><code>\n   * // sets the value\n   * var inp;\n   * function setup() {\n   *   inp = createInput('myValue');\n   * }\n   *\n   * function mousePressed() {\n   *   inp.value('myValue');\n   * }\n   * </code></div>\n   */\n\n  /**\n   * @method value\n   * @param  {String|Number}     value\n   * @chainable\n   */\n\n\n  p5.Element.prototype.value = function () {\n    if (arguments.length > 0) {\n      this.elt.value = arguments[0];\n      return this;\n    } else {\n      if (this.elt.type === 'range') {\n        return parseFloat(this.elt.value);\n      } else return this.elt.value;\n    }\n  };\n  /**\n   *\n   * Shows the current element. Essentially, setting display:block for the style.\n   *\n   * @method show\n   * @chainable\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('div');\n   * div.style('display', 'none');\n   * div.show(); // turns display to block\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.show = function () {\n    this.elt.style.display = 'block';\n    return this;\n  };\n  /**\n   * Hides the current element. Essentially, setting display:none for the style.\n   *\n   * @method hide\n   * @chainable\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('this is a div');\n   * div.hide();\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.hide = function () {\n    this.elt.style.display = 'none';\n    return this;\n  };\n  /**\n   *\n   * Sets the width and height of the element. AUTO can be used to\n   * only adjust one dimension at a time. If no arguments are given, it\n   * returns the width and height of the element in an object. In case of\n   * elements which need to be loaded, such as images, it is recommended\n   * to call the function after the element has finished loading.\n   *\n   * @method size\n   * @return {Object} the width and height of the element in an object\n   * @example\n   * <div class='norender'><code>\n   * let div = createDiv('this is a div');\n   * div.size(100, 100);\n   * let img = createImg('assets/laDefense.jpg', () => {\n   *   img.size(10, AUTO);\n   * });\n   * </code></div>\n   */\n\n  /**\n   * @method size\n   * @param  {Number|Constant} w    width of the element, either AUTO, or a number\n   * @param  {Number|Constant} [h] height of the element, either AUTO, or a number\n   * @chainable\n   */\n\n\n  p5.Element.prototype.size = function (w, h) {\n    if (arguments.length === 0) {\n      return {\n        width: this.elt.offsetWidth,\n        height: this.elt.offsetHeight\n      };\n    } else {\n      var aW = w;\n      var aH = h;\n      var AUTO = p5.prototype.AUTO;\n\n      if (aW !== AUTO || aH !== AUTO) {\n        if (aW === AUTO) {\n          aW = h * this.width / this.height;\n        } else if (aH === AUTO) {\n          aH = w * this.height / this.width;\n        } // set diff for cnv vs normal div\n\n\n        if (this.elt instanceof HTMLCanvasElement) {\n          var j = {};\n          var k = this.elt.getContext('2d');\n          var prop;\n\n          for (prop in k) {\n            j[prop] = k[prop];\n          }\n\n          this.elt.setAttribute('width', aW * this._pInst._pixelDensity);\n          this.elt.setAttribute('height', aH * this._pInst._pixelDensity);\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n\n          this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n\n          for (prop in j) {\n            this.elt.getContext('2d')[prop] = j[prop];\n          }\n        } else {\n          this.elt.style.width = aW + 'px';\n          this.elt.style.height = aH + 'px';\n          this.elt.width = aW;\n          this.elt.height = aH;\n        }\n\n        this.width = this.elt.offsetWidth;\n        this.height = this.elt.offsetHeight;\n\n        if (this._pInst && this._pInst._curElement) {\n          // main canvas associated with p5 instance\n          if (this._pInst._curElement.elt === this.elt) {\n            this._pInst._setProperty('width', this.elt.offsetWidth);\n\n            this._pInst._setProperty('height', this.elt.offsetHeight);\n          }\n        }\n      }\n\n      return this;\n    }\n  };\n  /**\n   * Removes the element and deregisters all listeners.\n   * @method remove\n   * @example\n   * <div class='norender'><code>\n   * var myDiv = createDiv('this is some text');\n   * myDiv.remove();\n   * </code></div>\n   */\n\n\n  p5.Element.prototype.remove = function () {\n    // deregister events\n    for (var ev in this._events) {\n      this.elt.removeEventListener(ev, this._events[ev]);\n    }\n\n    if (this.elt.parentNode) {\n      this.elt.parentNode.removeChild(this.elt);\n    }\n\n    delete this;\n  };\n  /**\n   * Registers a callback that gets called every time a file that is\n   * dropped on the element has been loaded.\n   * p5 will load every dropped file into memory and pass it as a p5.File object to the callback.\n   * Multiple files dropped at the same time will result in multiple calls to the callback.\n   *\n   * You can optionally pass a second callback which will be registered to the raw\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event.\n   * The callback will thus be provided the original\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\n   * Dropping multiple files at the same time will trigger the second callback once per drop,\n   * whereas the first callback will trigger for each loaded file.\n   *\n   * @method drop\n   * @param  {Function} callback  callback to receive loaded file, called for each file dropped.\n   * @param  {Function} [fxn]     callback triggered once when files are dropped with the drop event.\n   * @chainable\n   * @example\n   * <div><code>\n   * function setup() {\n   *   var c = createCanvas(100, 100);\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('drop file', width / 2, height / 2);\n   *   c.drop(gotFile);\n   * }\n   *\n   * function gotFile(file) {\n   *   background(200);\n   *   text('received file:', width / 2, height / 2);\n   *   text(file.name, width / 2, height / 2 + 50);\n   * }\n   * </code></div>\n   *\n   * <div><code>\n   * var img;\n   *\n   * function setup() {\n   *   var c = createCanvas(100, 100);\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('drop image', width / 2, height / 2);\n   *   c.drop(gotFile);\n   * }\n   *\n   * function draw() {\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * function gotFile(file) {\n   *   img = createImg(file.data).hide();\n   * }\n   * </code></div>\n   *\n   * @alt\n   * Canvas turns into whatever image is dragged/dropped onto it.\n   */\n\n\n  p5.Element.prototype.drop = function (callback, fxn) {\n    // Is the file stuff supported?\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      if (!this._dragDisabled) {\n        this._dragDisabled = true;\n\n        var preventDefault = function (evt) {\n          evt.preventDefault();\n        }; // If you want to be able to drop you've got to turn off\n        // a lot of default behavior.\n        // avoid `attachListener` here, since it overrides other handlers.\n\n\n        this.elt.addEventListener('dragover', preventDefault); // If this is a drag area we need to turn off the default behavior\n\n        this.elt.addEventListener('dragleave', preventDefault);\n      } // Deal with the files\n\n\n      p5.Element._attachListener('drop', function (evt) {\n        evt.preventDefault(); // Call the second argument as a callback that receives the raw drop event\n\n        if (typeof fxn === 'function') {\n          fxn.call(this, evt);\n        } // A FileList\n\n\n        var files = evt.dataTransfer.files; // Load each one and trigger the callback\n\n        for (var i = 0; i < files.length; i++) {\n          var f = files[i];\n\n          p5.File._load(f, callback);\n        }\n      }, this);\n    } else {\n      console.log('The File APIs are not fully supported in this browser.');\n    }\n\n    return this;\n  }; // =============================================================================\n  //                         p5.MediaElement additions\n  // =============================================================================\n\n  /**\n   * Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods\n   * of <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not\n   * called directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>,\n   * <a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>.\n   *\n   * @class p5.MediaElement\n   * @constructor\n   * @param {String} elt DOM node that is wrapped\n   */\n\n\n  p5.MediaElement = function (elt, pInst) {\n    p5.Element.call(this, elt, pInst);\n    var self = this;\n    this.elt.crossOrigin = 'anonymous';\n    this._prevTime = 0;\n    this._cueIDCounter = 0;\n    this._cues = [];\n    this._pixelsState = this;\n    this._pixelDensity = 1;\n    this._modified = false;\n    this._pixelsDirty = true;\n    this._pixelsTime = -1; // the time at which we last updated 'pixels'\n\n    /**\n     * Path to the media element source.\n     *\n     * @property src\n     * @return {String} src\n     * @example\n     * <div><code>\n     * var ele;\n     *\n     * function setup() {\n     *   background(250);\n     *\n     *   //p5.MediaElement objects are usually created\n     *   //by calling the createAudio(), createVideo(),\n     *   //and createCapture() functions.\n     *\n     *   //In this example we create\n     *   //a new p5.MediaElement via createAudio().\n     *   ele = createAudio('assets/beat.mp3');\n     *\n     *   //We'll set up our example so that\n     *   //when you click on the text,\n     *   //an alert box displays the MediaElement's\n     *   //src field.\n     *   textAlign(CENTER);\n     *   text('Click Me!', width / 2, height / 2);\n     * }\n     *\n     * function mouseClicked() {\n     *   //here we test if the mouse is over the\n     *   //canvas element when it's clicked\n     *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n     *     //Show our p5.MediaElement's src field\n     *     alert(ele.src);\n     *   }\n     * }\n     * </code></div>\n     */\n\n    Object.defineProperty(self, 'src', {\n      get: function () {\n        var firstChildSrc = self.elt.children[0].src;\n        var srcVal = self.elt.src === window.location.href ? '' : self.elt.src;\n        var ret = firstChildSrc === window.location.href ? srcVal : firstChildSrc;\n        return ret;\n      },\n      set: function (newValue) {\n        for (var i = 0; i < self.elt.children.length; i++) {\n          self.elt.removeChild(self.elt.children[i]);\n        }\n\n        var source = document.createElement('source');\n        source.src = newValue;\n        elt.appendChild(source);\n        self.elt.src = newValue;\n        self.modified = true;\n      }\n    }); // private _onended callback, set by the method: onended(callback)\n\n    self._onended = function () {};\n\n    self.elt.onended = function () {\n      self._onended(self);\n    };\n  };\n\n  p5.MediaElement.prototype = Object.create(p5.Element.prototype);\n  /**\n   * Play an HTML5 media element.\n   *\n   * @method play\n   * @chainable\n   * @example\n   * <div><code>\n   * var ele;\n   *\n   * function setup() {\n   *   //p5.MediaElement objects are usually created\n   *   //by calling the createAudio(), createVideo(),\n   *   //and createCapture() functions.\n   *\n   *   //In this example we create\n   *   //a new p5.MediaElement via createAudio().\n   *   ele = createAudio('assets/beat.mp3');\n   *\n   *   background(250);\n   *   textAlign(CENTER);\n   *   text('Click to Play!', width / 2, height / 2);\n   * }\n   *\n   * function mouseClicked() {\n   *   //here we test if the mouse is over the\n   *   //canvas element when it's clicked\n   *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n   *     //Here we call the play() function on\n   *     //the p5.MediaElement we created above.\n   *     //This will start the audio sample.\n   *     ele.play();\n   *\n   *     background(200);\n   *     text('You clicked Play!', width / 2, height / 2);\n   *   }\n   * }\n   * </code></div>\n   */\n\n  p5.MediaElement.prototype.play = function () {\n    if (this.elt.currentTime === this.elt.duration) {\n      this.elt.currentTime = 0;\n    }\n\n    var promise;\n\n    if (this.elt.readyState > 1) {\n      promise = this.elt.play();\n    } else {\n      // in Chrome, playback cannot resume after being stopped and must reload\n      this.elt.load();\n      promise = this.elt.play();\n    }\n\n    if (promise && promise.catch) {\n      promise.catch(function (e) {\n        console.log('WARN: Element play method raised an error asynchronously', e);\n      });\n    }\n\n    return this;\n  };\n  /**\n   * Stops an HTML5 media element (sets current time to zero).\n   *\n   * @method stop\n   * @chainable\n   * @example\n   * <div><code>\n   * //This example both starts\n   * //and stops a sound sample\n   * //when the user clicks the canvas\n   *\n   * //We will store the p5.MediaElement\n   * //object in here\n   * var ele;\n   *\n   * //while our audio is playing,\n   * //this will be set to true\n   * var sampleIsPlaying = false;\n   *\n   * function setup() {\n   *   //Here we create a p5.MediaElement object\n   *   //using the createAudio() function.\n   *   ele = createAudio('assets/beat.mp3');\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('Click to play!', width / 2, height / 2);\n   * }\n   *\n   * function mouseClicked() {\n   *   //here we test if the mouse is over the\n   *   //canvas element when it's clicked\n   *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n   *     background(200);\n   *\n   *     if (sampleIsPlaying) {\n   *       //if the sample is currently playing\n   *       //calling the stop() function on\n   *       //our p5.MediaElement will stop\n   *       //it and reset its current\n   *       //time to 0 (i.e. it will start\n   *       //at the beginning the next time\n   *       //you play it)\n   *       ele.stop();\n   *\n   *       sampleIsPlaying = false;\n   *       text('Click to play!', width / 2, height / 2);\n   *     } else {\n   *       //loop our sound element until we\n   *       //call ele.stop() on it.\n   *       ele.loop();\n   *\n   *       sampleIsPlaying = true;\n   *       text('Click to stop!', width / 2, height / 2);\n   *     }\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.stop = function () {\n    this.elt.pause();\n    this.elt.currentTime = 0;\n    return this;\n  };\n  /**\n   * Pauses an HTML5 media element.\n   *\n   * @method pause\n   * @chainable\n   * @example\n   * <div><code>\n   * //This example both starts\n   * //and pauses a sound sample\n   * //when the user clicks the canvas\n   *\n   * //We will store the p5.MediaElement\n   * //object in here\n   * var ele;\n   *\n   * //while our audio is playing,\n   * //this will be set to true\n   * var sampleIsPlaying = false;\n   *\n   * function setup() {\n   *   //Here we create a p5.MediaElement object\n   *   //using the createAudio() function.\n   *   ele = createAudio('assets/lucky_dragons.mp3');\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('Click to play!', width / 2, height / 2);\n   * }\n   *\n   * function mouseClicked() {\n   *   //here we test if the mouse is over the\n   *   //canvas element when it's clicked\n   *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n   *     background(200);\n   *\n   *     if (sampleIsPlaying) {\n   *       //Calling pause() on our\n   *       //p5.MediaElement will stop it\n   *       //playing, but when we call the\n   *       //loop() or play() functions\n   *       //the sample will start from\n   *       //where we paused it.\n   *       ele.pause();\n   *\n   *       sampleIsPlaying = false;\n   *       text('Click to resume!', width / 2, height / 2);\n   *     } else {\n   *       //loop our sound element until we\n   *       //call ele.pause() on it.\n   *       ele.loop();\n   *\n   *       sampleIsPlaying = true;\n   *       text('Click to pause!', width / 2, height / 2);\n   *     }\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.pause = function () {\n    this.elt.pause();\n    return this;\n  };\n  /**\n   * Set 'loop' to true for an HTML5 media element, and starts playing.\n   *\n   * @method loop\n   * @chainable\n   * @example\n   * <div><code>\n   * //Clicking the canvas will loop\n   * //the audio sample until the user\n   * //clicks again to stop it\n   *\n   * //We will store the p5.MediaElement\n   * //object in here\n   * var ele;\n   *\n   * //while our audio is playing,\n   * //this will be set to true\n   * var sampleIsLooping = false;\n   *\n   * function setup() {\n   *   //Here we create a p5.MediaElement object\n   *   //using the createAudio() function.\n   *   ele = createAudio('assets/lucky_dragons.mp3');\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('Click to loop!', width / 2, height / 2);\n   * }\n   *\n   * function mouseClicked() {\n   *   //here we test if the mouse is over the\n   *   //canvas element when it's clicked\n   *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n   *     background(200);\n   *\n   *     if (!sampleIsLooping) {\n   *       //loop our sound element until we\n   *       //call ele.stop() on it.\n   *       ele.loop();\n   *\n   *       sampleIsLooping = true;\n   *       text('Click to stop!', width / 2, height / 2);\n   *     } else {\n   *       ele.stop();\n   *\n   *       sampleIsLooping = false;\n   *       text('Click to loop!', width / 2, height / 2);\n   *     }\n   *   }\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.loop = function () {\n    this.elt.setAttribute('loop', true);\n    this.play();\n    return this;\n  };\n  /**\n   * Set 'loop' to false for an HTML5 media element. Element will stop\n   * when it reaches the end.\n   *\n   * @method noLoop\n   * @chainable\n   * @example\n   * <div><code>\n   * //This example both starts\n   * //and stops loop of sound sample\n   * //when the user clicks the canvas\n   *\n   * //We will store the p5.MediaElement\n   * //object in here\n   * var ele;\n   * //while our audio is playing,\n   * //this will be set to true\n   * var sampleIsPlaying = false;\n   *\n   * function setup() {\n   *   //Here we create a p5.MediaElement object\n   *   //using the createAudio() function.\n   *   ele = createAudio('assets/beat.mp3');\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('Click to play!', width / 2, height / 2);\n   * }\n   *\n   * function mouseClicked() {\n   *   //here we test if the mouse is over the\n   *   //canvas element when it's clicked\n   *   if (mouseX >= 0 && mouseX <= width && mouseY >= 0 && mouseY <= height) {\n   *     background(200);\n   *\n   *     if (sampleIsPlaying) {\n   *       ele.noLoop();\n   *       text('No more Loops!', width / 2, height / 2);\n   *     } else {\n   *       ele.loop();\n   *       sampleIsPlaying = true;\n   *       text('Click to stop looping!', width / 2, height / 2);\n   *     }\n   *   }\n   * }\n   * </code></div>\n   *\n   */\n\n\n  p5.MediaElement.prototype.noLoop = function () {\n    this.elt.setAttribute('loop', false);\n    return this;\n  };\n  /**\n   * Set HTML5 media element to autoplay or not.\n   *\n   * @method autoplay\n   * @param {Boolean} autoplay whether the element should autoplay\n   * @chainable\n   */\n\n\n  p5.MediaElement.prototype.autoplay = function (val) {\n    this.elt.setAttribute('autoplay', val);\n    return this;\n  };\n  /**\n   * Sets volume for this HTML5 media element. If no argument is given,\n   * returns the current volume.\n   *\n   * @method volume\n   * @return {Number} current volume\n   *\n   * @example\n   * <div><code>\n   * var ele;\n   * function setup() {\n   *   // p5.MediaElement objects are usually created\n   *   // by calling the createAudio(), createVideo(),\n   *   // and createCapture() functions.\n   *   // In this example we create\n   *   // a new p5.MediaElement via createAudio().\n   *   ele = createAudio('assets/lucky_dragons.mp3');\n   *   background(250);\n   *   textAlign(CENTER);\n   *   text('Click to Play!', width / 2, height / 2);\n   * }\n   * function mouseClicked() {\n   *   // Here we call the volume() function\n   *   // on the sound element to set its volume\n   *   // Volume must be between 0.0 and 1.0\n   *   ele.volume(0.2);\n   *   ele.play();\n   *   background(200);\n   *   text('You clicked Play!', width / 2, height / 2);\n   * }\n   * </code></div>\n   * <div><code>\n   * var audio;\n   * var counter = 0;\n   *\n   * function loaded() {\n   *   audio.play();\n   * }\n   *\n   * function setup() {\n   *   audio = createAudio('assets/lucky_dragons.mp3', loaded);\n   *   textAlign(CENTER);\n   * }\n   *\n   * function draw() {\n   *   if (counter === 0) {\n   *     background(0, 255, 0);\n   *     text('volume(0.9)', width / 2, height / 2);\n   *   } else if (counter === 1) {\n   *     background(255, 255, 0);\n   *     text('volume(0.5)', width / 2, height / 2);\n   *   } else if (counter === 2) {\n   *     background(255, 0, 0);\n   *     text('volume(0.1)', width / 2, height / 2);\n   *   }\n   * }\n   *\n   * function mousePressed() {\n   *   counter++;\n   *   if (counter === 0) {\n   *     audio.volume(0.9);\n   *   } else if (counter === 1) {\n   *     audio.volume(0.5);\n   *   } else if (counter === 2) {\n   *     audio.volume(0.1);\n   *   } else {\n   *     counter = 0;\n   *     audio.volume(0.9);\n   *   }\n   * }\n   * </code>\n   * </div>\n   */\n\n  /**\n   * @method volume\n   * @param {Number}            val volume between 0.0 and 1.0\n   * @chainable\n   */\n\n\n  p5.MediaElement.prototype.volume = function (val) {\n    if (typeof val === 'undefined') {\n      return this.elt.volume;\n    } else {\n      this.elt.volume = val;\n    }\n  };\n  /**\n   * If no arguments are given, returns the current playback speed of the\n   * element. The speed parameter sets the speed where 2.0 will play the\n   * element twice as fast, 0.5 will play at half the speed, and -1 will play\n   * the element in normal speed in reverse.(Note that not all browsers support\n   * backward playback and even if they do, playback might not be smooth.)\n   *\n   * @method speed\n   * @return {Number} current playback speed of the element\n   *\n   * @example\n   * <div class='norender notest'><code>\n   * //Clicking the canvas will loop\n   * //the audio sample until the user\n   * //clicks again to stop it\n   *\n   * //We will store the p5.MediaElement\n   * //object in here\n   * var ele;\n   * var button;\n   *\n   * function setup() {\n   *   createCanvas(710, 400);\n   *   //Here we create a p5.MediaElement object\n   *   //using the createAudio() function.\n   *   ele = createAudio('assets/beat.mp3');\n   *   ele.loop();\n   *   background(200);\n   *\n   *   button = createButton('2x speed');\n   *   button.position(100, 68);\n   *   button.mousePressed(twice_speed);\n   *\n   *   button = createButton('half speed');\n   *   button.position(200, 68);\n   *   button.mousePressed(half_speed);\n   *\n   *   button = createButton('reverse play');\n   *   button.position(300, 68);\n   *   button.mousePressed(reverse_speed);\n   *\n   *   button = createButton('STOP');\n   *   button.position(400, 68);\n   *   button.mousePressed(stop_song);\n   *\n   *   button = createButton('PLAY!');\n   *   button.position(500, 68);\n   *   button.mousePressed(play_speed);\n   * }\n   *\n   * function twice_speed() {\n   *   ele.speed(2);\n   * }\n   *\n   * function half_speed() {\n   *   ele.speed(0.5);\n   * }\n   *\n   * function reverse_speed() {\n   *   ele.speed(-1);\n   * }\n   *\n   * function stop_song() {\n   *   ele.stop();\n   * }\n   *\n   * function play_speed() {\n   *   ele.play();\n   * }\n   * </code></div>\n   */\n\n  /**\n   * @method speed\n   * @param {Number} speed  speed multiplier for element playback\n   * @chainable\n   */\n\n\n  p5.MediaElement.prototype.speed = function (val) {\n    if (typeof val === 'undefined') {\n      return this.presetPlaybackRate || this.elt.playbackRate;\n    } else {\n      if (this.loadedmetadata) {\n        this.elt.playbackRate = val;\n      } else {\n        this.presetPlaybackRate = val;\n      }\n    }\n  };\n  /**\n   * If no arguments are given, returns the current time of the element.\n   * If an argument is given the current time of the element is set to it.\n   *\n   * @method time\n   * @return {Number} current time (in seconds)\n   *\n   * @example\n   * <div><code>\n   * var ele;\n   * var beginning = true;\n   * function setup() {\n   *   //p5.MediaElement objects are usually created\n   *   //by calling the createAudio(), createVideo(),\n   *   //and createCapture() functions.\n   *\n   *   //In this example we create\n   *   //a new p5.MediaElement via createAudio().\n   *   ele = createAudio('assets/lucky_dragons.mp3');\n   *   background(250);\n   *   textAlign(CENTER);\n   *   text('start at beginning', width / 2, height / 2);\n   * }\n   *\n   * // this function fires with click anywhere\n   * function mousePressed() {\n   *   if (beginning === true) {\n   *     // here we start the sound at the beginning\n   *     // time(0) is not necessary here\n   *     // as this produces the same result as\n   *     // play()\n   *     ele.play().time(0);\n   *     background(200);\n   *     text('jump 2 sec in', width / 2, height / 2);\n   *     beginning = false;\n   *   } else {\n   *     // here we jump 2 seconds into the sound\n   *     ele.play().time(2);\n   *     background(250);\n   *     text('start at beginning', width / 2, height / 2);\n   *     beginning = true;\n   *   }\n   * }\n   * </code></div>\n   */\n\n  /**\n   * @method time\n   * @param {Number} time time to jump to (in seconds)\n   * @chainable\n   */\n\n\n  p5.MediaElement.prototype.time = function (val) {\n    if (typeof val === 'undefined') {\n      return this.elt.currentTime;\n    } else {\n      this.elt.currentTime = val;\n      return this;\n    }\n  };\n  /**\n   * Returns the duration of the HTML5 media element.\n   *\n   * @method duration\n   * @return {Number} duration\n   *\n   * @example\n   * <div><code>\n   * var ele;\n   * function setup() {\n   *   //p5.MediaElement objects are usually created\n   *   //by calling the createAudio(), createVideo(),\n   *   //and createCapture() functions.\n   *   //In this example we create\n   *   //a new p5.MediaElement via createAudio().\n   *   ele = createAudio('assets/doorbell.mp3');\n   *   background(250);\n   *   textAlign(CENTER);\n   *   text('Click to know the duration!', 10, 25, 70, 80);\n   * }\n   * function mouseClicked() {\n   *   ele.play();\n   *   background(200);\n   *   //ele.duration dislpays the duration\n   *   text(ele.duration() + ' seconds', width / 2, height / 2);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.duration = function () {\n    return this.elt.duration;\n  };\n\n  p5.MediaElement.prototype.pixels = [];\n\n  p5.MediaElement.prototype._ensureCanvas = function () {\n    if (!this.canvas) {\n      this.canvas = document.createElement('canvas');\n      this.drawingContext = this.canvas.getContext('2d');\n      this.setModified(true);\n    }\n\n    if (this.loadedmetadata) {\n      // wait for metadata for w/h\n      if (this.canvas.width !== this.elt.width) {\n        this.canvas.width = this.elt.width;\n        this.canvas.height = this.elt.height;\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        this._pixelsDirty = true;\n      }\n\n      var currentTime = this.elt.currentTime;\n\n      if (this._pixelsDirty || this._pixelsTime !== currentTime) {\n        // only update the pixels array if it's dirty, or\n        // if the video time has changed.\n        this._pixelsTime = currentTime;\n        this._pixelsDirty = true;\n        this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height);\n        this.setModified(true);\n      }\n    }\n  };\n\n  p5.MediaElement.prototype.loadPixels = function () {\n    this._ensureCanvas();\n\n    return p5.Renderer2D.prototype.loadPixels.apply(this, arguments);\n  };\n\n  p5.MediaElement.prototype.updatePixels = function (x, y, w, h) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n\n      p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);\n    }\n\n    this.setModified(true);\n    return this;\n  };\n\n  p5.MediaElement.prototype.get = function () {\n    this._ensureCanvas();\n\n    return p5.Renderer2D.prototype.get.apply(this, arguments);\n  };\n\n  p5.MediaElement.prototype._getPixel = function () {\n    this.loadPixels();\n    return p5.Renderer2D.prototype._getPixel.apply(this, arguments);\n  };\n\n  p5.MediaElement.prototype.set = function (x, y, imgOrCol) {\n    if (this.loadedmetadata) {\n      // wait for metadata\n      this._ensureCanvas();\n\n      p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);\n      this.setModified(true);\n    }\n  };\n\n  p5.MediaElement.prototype.copy = function () {\n    this._ensureCanvas();\n\n    p5.Renderer2D.prototype.copy.apply(this, arguments);\n  };\n\n  p5.MediaElement.prototype.mask = function () {\n    this.loadPixels();\n    this.setModified(true);\n    p5.Image.prototype.mask.apply(this, arguments);\n  };\n  /**\n   * helper method for web GL mode to figure out if the element\n   * has been modified and might need to be re-uploaded to texture\n   * memory between frames.\n   * @method isModified\n   * @private\n   * @return {boolean} a boolean indicating whether or not the\n   * image has been updated or modified since last texture upload.\n   */\n\n\n  p5.MediaElement.prototype.isModified = function () {\n    return this._modified;\n  };\n  /**\n   * helper method for web GL mode to indicate that an element has been\n   * changed or unchanged since last upload. gl texture upload will\n   * set this value to false after uploading the texture; or might set\n   * it to true if metadata has become available but there is no actual\n   * texture data available yet..\n   * @method setModified\n   * @param {boolean} val sets whether or not the element has been\n   * modified.\n   * @private\n   */\n\n\n  p5.MediaElement.prototype.setModified = function (value) {\n    this._modified = value;\n  };\n  /**\n   * Schedule an event to be called when the audio or video\n   * element reaches the end. If the element is looping,\n   * this will not be called. The element is passed in\n   * as the argument to the onended callback.\n   *\n   * @method  onended\n   * @param  {Function} callback function to call when the\n   *                             soundfile has ended. The\n   *                             media element will be passed\n   *                             in as the argument to the\n   *                             callback.\n   * @chainable\n   * @example\n   * <div><code>\n   * function setup() {\n   *   var audioEl = createAudio('assets/beat.mp3');\n   *   audioEl.showControls();\n   *   audioEl.onended(sayDone);\n   * }\n   *\n   * function sayDone(elt) {\n   *   alert('done playing ' + elt.src);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.onended = function (callback) {\n    this._onended = callback;\n    return this;\n  };\n  /*** CONNECT TO WEB AUDIO API / p5.sound.js ***/\n\n  /**\n   * Send the audio output of this element to a specified audioNode or\n   * p5.sound object. If no element is provided, connects to p5's master\n   * output. That connection is established when this method is first called.\n   * All connections are removed by the .disconnect() method.\n   *\n   * This method is meant to be used with the p5.sound.js addon library.\n   *\n   * @method  connect\n   * @param  {AudioNode|Object} audioNode AudioNode from the Web Audio API,\n   * or an object from the p5.sound library\n   */\n\n\n  p5.MediaElement.prototype.connect = function (obj) {\n    var audioContext, masterOutput; // if p5.sound exists, same audio context\n\n    if (typeof p5.prototype.getAudioContext === 'function') {\n      audioContext = p5.prototype.getAudioContext();\n      masterOutput = p5.soundOut.input;\n    } else {\n      try {\n        audioContext = obj.context;\n        masterOutput = audioContext.destination;\n      } catch (e) {\n        throw 'connect() is meant to be used with Web Audio API or p5.sound.js';\n      }\n    } // create a Web Audio MediaElementAudioSourceNode if none already exists\n\n\n    if (!this.audioSourceNode) {\n      this.audioSourceNode = audioContext.createMediaElementSource(this.elt); // connect to master output when this method is first called\n\n      this.audioSourceNode.connect(masterOutput);\n    } // connect to object if provided\n\n\n    if (obj) {\n      if (obj.input) {\n        this.audioSourceNode.connect(obj.input);\n      } else {\n        this.audioSourceNode.connect(obj);\n      }\n    } else {\n      // otherwise connect to master output of p5.sound / AudioContext\n      this.audioSourceNode.connect(masterOutput);\n    }\n  };\n  /**\n   * Disconnect all Web Audio routing, including to master output.\n   * This is useful if you want to re-route the output through\n   * audio effects, for example.\n   *\n   * @method  disconnect\n   */\n\n\n  p5.MediaElement.prototype.disconnect = function () {\n    if (this.audioSourceNode) {\n      this.audioSourceNode.disconnect();\n    } else {\n      throw 'nothing to disconnect';\n    }\n  };\n  /*** SHOW / HIDE CONTROLS ***/\n\n  /**\n   * Show the default MediaElement controls, as determined by the web browser.\n   *\n   * @method  showControls\n   * @example\n   * <div><code>\n   * var ele;\n   * function setup() {\n   *   //p5.MediaElement objects are usually created\n   *   //by calling the createAudio(), createVideo(),\n   *   //and createCapture() functions.\n   *   //In this example we create\n   *   //a new p5.MediaElement via createAudio()\n   *   ele = createAudio('assets/lucky_dragons.mp3');\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('Click to Show Controls!', 10, 25, 70, 80);\n   * }\n   * function mousePressed() {\n   *   ele.showControls();\n   *   background(200);\n   *   text('Controls Shown', width / 2, height / 2);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.showControls = function () {\n    // must set style for the element to show on the page\n    this.elt.style['text-align'] = 'inherit';\n    this.elt.controls = true;\n  };\n  /**\n   * Hide the default mediaElement controls.\n   * @method hideControls\n   * @example\n   * <div><code>\n   * var ele;\n   * function setup() {\n   *   //p5.MediaElement objects are usually created\n   *   //by calling the createAudio(), createVideo(),\n   *   //and createCapture() functions.\n   *   //In this example we create\n   *   //a new p5.MediaElement via createAudio()\n   *   ele = createAudio('assets/lucky_dragons.mp3');\n   *   ele.showControls();\n   *   background(200);\n   *   textAlign(CENTER);\n   *   text('Click to hide Controls!', 10, 25, 70, 80);\n   * }\n   * function mousePressed() {\n   *   ele.hideControls();\n   *   background(200);\n   *   text('Controls hidden', width / 2, height / 2);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.hideControls = function () {\n    this.elt.controls = false;\n  };\n  /*** SCHEDULE EVENTS ***/\n  // Cue inspired by JavaScript setTimeout, and the\n  // Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org\n\n\n  var Cue = function (callback, time, id, val) {\n    this.callback = callback;\n    this.time = time;\n    this.id = id;\n    this.val = val;\n  };\n  /**\n   * Schedule events to trigger every time a MediaElement\n   * (audio/video) reaches a playback cue point.\n   *\n   * Accepts a callback function, a time (in seconds) at which to trigger\n   * the callback, and an optional parameter for the callback.\n   *\n   * Time will be passed as the first parameter to the callback function,\n   * and param will be the second parameter.\n   *\n   *\n   * @method  addCue\n   * @param {Number}   time     Time in seconds, relative to this media\n   *                             element's playback. For example, to trigger\n   *                             an event every time playback reaches two\n   *                             seconds, pass in the number 2. This will be\n   *                             passed as the first parameter to\n   *                             the callback function.\n   * @param {Function} callback Name of a function that will be\n   *                             called at the given time. The callback will\n   *                             receive time and (optionally) param as its\n   *                             two parameters.\n   * @param {Object} [value]    An object to be passed as the\n   *                             second parameter to the\n   *                             callback function.\n   * @return {Number} id ID of this cue,\n   *                     useful for removeCue(id)\n   * @example\n   * <div><code>\n   * //\n   * //\n   * function setup() {\n   *   noCanvas();\n   *\n   *   var audioEl = createAudio('assets/beat.mp3');\n   *   audioEl.showControls();\n   *\n   *   // schedule three calls to changeBackground\n   *   audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n   *   audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n   *   audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n   *   audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n   *   audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n   *   audioEl.addCue(5.0, changeBackground, color(255, 255, 0));\n   * }\n   *\n   * function changeBackground(val) {\n   *   background(val);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.addCue = function (time, callback, val) {\n    var id = this._cueIDCounter++;\n    var cue = new Cue(callback, time, id, val);\n\n    this._cues.push(cue);\n\n    if (!this.elt.ontimeupdate) {\n      this.elt.ontimeupdate = this._onTimeUpdate.bind(this);\n    }\n\n    return id;\n  };\n  /**\n   * Remove a callback based on its ID. The ID is returned by the\n   * addCue method.\n   * @method removeCue\n   * @param  {Number} id ID of the cue, as returned by addCue\n   * @example\n   * <div><code>\n   * var audioEl, id1, id2;\n   * function setup() {\n   *   background(255, 255, 255);\n   *   audioEl = createAudio('assets/beat.mp3');\n   *   audioEl.showControls();\n   *   // schedule five calls to changeBackground\n   *   id1 = audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n   *   audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n   *   audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n   *   audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n   *   id2 = audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n   *   text('Click to remove first and last Cue!', 10, 25, 70, 80);\n   * }\n   * function mousePressed() {\n   *   audioEl.removeCue(id1);\n   *   audioEl.removeCue(id2);\n   * }\n   * function changeBackground(val) {\n   *   background(val);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.removeCue = function (id) {\n    for (var i = 0; i < this._cues.length; i++) {\n      if (this._cues[i].id === id) {\n        console.log(id);\n\n        this._cues.splice(i, 1);\n      }\n    }\n\n    if (this._cues.length === 0) {\n      this.elt.ontimeupdate = null;\n    }\n  };\n  /**\n   * Remove all of the callbacks that had originally been scheduled\n   * via the addCue method.\n   * @method  clearCues\n   * @param  {Number} id ID of the cue, as returned by addCue\n   * @example\n   * <div><code>\n   * var audioEl;\n   * function setup() {\n   *   background(255, 255, 255);\n   *   audioEl = createAudio('assets/beat.mp3');\n   *   //Show the default MediaElement controls, as determined by the web browser\n   *   audioEl.showControls();\n   *   // schedule calls to changeBackground\n   *   background(200);\n   *   text('Click to change Cue!', 10, 25, 70, 80);\n   *   audioEl.addCue(0.5, changeBackground, color(255, 0, 0));\n   *   audioEl.addCue(1.0, changeBackground, color(0, 255, 0));\n   *   audioEl.addCue(2.5, changeBackground, color(0, 0, 255));\n   *   audioEl.addCue(3.0, changeBackground, color(0, 255, 255));\n   *   audioEl.addCue(4.2, changeBackground, color(255, 255, 0));\n   * }\n   * function mousePressed() {\n   *   // here we clear the scheduled callbacks\n   *   audioEl.clearCues();\n   *   // then we add some more callbacks\n   *   audioEl.addCue(1, changeBackground, color(2, 2, 2));\n   *   audioEl.addCue(3, changeBackground, color(255, 255, 0));\n   * }\n   * function changeBackground(val) {\n   *   background(val);\n   * }\n   * </code></div>\n   */\n\n\n  p5.MediaElement.prototype.clearCues = function () {\n    this._cues = [];\n    this.elt.ontimeupdate = null;\n  }; // private method that checks for cues to be fired if events\n  // have been scheduled using addCue(callback, time).\n\n\n  p5.MediaElement.prototype._onTimeUpdate = function () {\n    var playbackTime = this.time();\n\n    for (var i = 0; i < this._cues.length; i++) {\n      var callbackTime = this._cues[i].time;\n      var val = this._cues[i].val;\n\n      if (this._prevTime < callbackTime && callbackTime <= playbackTime) {\n        // pass the scheduled callbackTime as parameter to the callback\n        this._cues[i].callback(val);\n      }\n    }\n\n    this._prevTime = playbackTime;\n  };\n  /**\n   * Base class for a file.\n   * Used for Element.drop and createFileInput.\n   *\n   * @class p5.File\n   * @constructor\n   * @param {File} file File that is wrapped\n   */\n\n\n  p5.File = function (file, pInst) {\n    /**\n     * Underlying File object. All normal File methods can be called on this.\n     *\n     * @property file\n     */\n    this.file = file;\n    this._pInst = pInst; // Splitting out the file type into two components\n    // This makes determining if image or text etc simpler\n\n    var typeList = file.type.split('/');\n    /**\n     * File type (image, text, etc.)\n     *\n     * @property type\n     */\n\n    this.type = typeList[0];\n    /**\n     * File subtype (usually the file extension jpg, png, xml, etc.)\n     *\n     * @property subtype\n     */\n\n    this.subtype = typeList[1];\n    /**\n     * File name\n     *\n     * @property name\n     */\n\n    this.name = file.name;\n    /**\n     * File size\n     *\n     * @property size\n     */\n\n    this.size = file.size;\n    /**\n     * URL string containing image data.\n     *\n     * @property data\n     */\n\n    this.data = undefined;\n  };\n\n  p5.File._createLoader = function (theFile, callback) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var p5file = new p5.File(theFile);\n      p5file.data = e.target.result;\n      callback(p5file);\n    };\n\n    return reader;\n  };\n\n  p5.File._load = function (f, callback) {\n    // Text or data?\n    // This should likely be improved\n    if (/^text\\//.test(f.type)) {\n      p5.File._createLoader(f, callback).readAsText(f);\n    } else if (!/^(video|audio)\\//.test(f.type)) {\n      p5.File._createLoader(f, callback).readAsDataURL(f);\n    } else {\n      var file = new p5.File(f);\n      file.data = URL.createObjectURL(f);\n      callback(file);\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"script"}