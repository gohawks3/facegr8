{"ast":null,"code":"import * as p5 from \"p5\";\nimport \"p5/lib/addons/p5.dom\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport * as faceapi from \"face-api.js\";\nconst MODEL_URL = \"/models\";\nexport default function sketch(p) {\n  // variables\n  // save current camera  image\n  let capture = null; // save cocoSsd model\n\n  let cocoSsdModel = null; // to save the result of cocoSsd and face-api results\n\n  let cocoDrawings = [];\n  let faceDrawings = [];\n\n  function showCocoSSDResults(results) {\n    cocoDrawings = results;\n  }\n\n  function showFaceDetectionData(data) {\n    faceDrawings = data;\n  }\n\n  p.setup = async function () {\n    await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n    await faceapi.loadAgeGenderModel(MODEL_URL);\n    await faceapi.loadFaceExpressionModel(MODEL_URL);\n    p.createCanvas(1280, 720);\n    const constraints = {\n      video: {\n        mandatory: {\n          minWidth: 1280,\n          minHeight: 720\n        },\n        optional: [{\n          maxFrameRate: 10\n        }]\n      },\n      audio: false\n    };\n    capture = p.createCapture(constraints, () => {});\n    capture.id(\"video_element\");\n    capture.size(1280, 720);\n    capture.hide();\n    cocoSsd.load().then(model => {\n      try {\n        cocoSsdModel = model;\n      } catch (e) {\n        console.log(e);\n      }\n    }).catch(e => {\n      console.log(\"Error occurred: \", e);\n    });\n  };\n\n  p.draw = async () => {\n    if (!capture) return;\n    p.background(255);\n    p.image(capture, 0, 0);\n    p.fill(0, 0, 0, 0);\n    cocoDrawings.map(drawing => {\n      if (drawing) {\n        p.textSize(20);\n        p.strokeWeight(1);\n        const textX = drawing.bbox[0] + drawing.bbox[2];\n        const textY = drawing.bbox[1] + drawing.bbox[3];\n        const confidenetext = \"Confidence: \" + drawing.score.toFixed(1);\n        const textWidth = p.textWidth(confidenetext);\n        const itemTextWidth = p.textWidth(drawing.class);\n        p.text(drawing.cass, textX - itemTextWidth - 10, textY - 50);\n        p.text(confidenetext, textX - textWidth - 10, textY - 10);\n        p.stroke(\"rgb(100%, 100%, 100%)\");\n        p.rect(drawing.bbox[0], drawing.bbox[1], drawing.bbox[2], drawing.bbox[3]);\n      }\n    });\n    faceDrawings.map(drawing => {\n      if (drawing) {\n        p.textSize(15);\n        p.strokeWeight(1);\n        const textX = drawing.detection.box._x + drawing.detection.box._width;\n        const textY = drawing.detection.box._y + drawing.detection.box._height;\n        const confidenetext = \"Gender:\" + drawing.gender;\n        const textWidth = p.textWidth(confidenetext);\n        p.text(confidenetext, textX - textWidth, textY - 60);\n        const ageText = \"Age: \" + drawing.age.toFixed(0);\n        const ageTextWidth = p.textWidth(ageText);\n        p.text(ageText, textX - ageTextWidth, textY - 30);\n        const copiedExpression = drawing.expressions;\n        const expressions = Object.keys(copiedExpression).map(key => {\n          const value = copiedExpression[key];\n          return value;\n        });\n        const max = Math.max(...expressions);\n        const expression_value = Object.keys(copiedExpression).filter(key => {\n          return copiedExpression[key] === max;\n        })[0];\n        const expressionText = \"Mood: \" + expression_value;\n        const expressionWidth = p.textWidth(expressionText);\n        p.text(expressionText, textX - expressionWidth, textY - 10);\n        p.strokeWeight(4);\n        p.stroke(\"rgb(100%, 0%, 10%)\");\n        p.rect(drawing.detection.box._x, drawing.detection.box._y, drawing.detection.box._width, drawing.detection.box._height);\n      }\n    });\n    faceapi.detectAllFaces(capture.id()).withAgeAndGender().withFaceExpressions().then(data => {\n      showFaceDetectionData(data);\n    });\n\n    if (capture.loadedmetadata) {\n      if (cocoSsdModel) {\n        cocoSsdModel.detect(document.getElementById(\"video_element\")).then(showCocoSSDResults).catch(e => {\n          console.log(\"Exception: \", e);\n        });\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/cxu/Study/github/facegr8/src/ObjectDetectionSketch.js"],"names":["p5","cocoSsd","faceapi","MODEL_URL","sketch","p","capture","cocoSsdModel","cocoDrawings","faceDrawings","showCocoSSDResults","results","showFaceDetectionData","data","setup","loadSsdMobilenetv1Model","loadAgeGenderModel","loadFaceExpressionModel","createCanvas","constraints","video","mandatory","minWidth","minHeight","optional","maxFrameRate","audio","createCapture","id","size","hide","load","then","model","e","console","log","catch","draw","background","image","fill","map","drawing","textSize","strokeWeight","textX","bbox","textY","confidenetext","score","toFixed","textWidth","itemTextWidth","class","text","cass","stroke","rect","detection","box","_x","_width","_y","_height","gender","ageText","age","ageTextWidth","copiedExpression","expressions","Object","keys","key","value","max","Math","expression_value","filter","expressionText","expressionWidth","detectAllFaces","withAgeAndGender","withFaceExpressions","loadedmetadata","detect","document","getElementById"],"mappings":"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","sourcesContent":["import * as p5 from \"p5\";\nimport \"p5/lib/addons/p5.dom\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport * as faceapi from \"face-api.js\";\n\nconst MODEL_URL = \"/models\";\nexport default function sketch(p) {\n  // variables\n  // save current camera  image\n  let capture = null;\n\n  // save cocoSsd model\n  let cocoSsdModel = null;\n\n  // to save the result of cocoSsd and face-api results\n  let cocoDrawings = [];\n  let faceDrawings = [];\n\n  function showCocoSSDResults(results) {\n    cocoDrawings = results;\n  }\n\n  function showFaceDetectionData(data) {\n    faceDrawings = data;\n  }\n\n  p.setup = async function() {\n    await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\n    await faceapi.loadAgeGenderModel(MODEL_URL);\n    await faceapi.loadFaceExpressionModel(MODEL_URL);\n\n    p.createCanvas(1280, 720);\n\n    const constraints = {\n      video: {\n        mandatory: {\n          minWidth: 1280,\n          minHeight: 720\n        },\n        optional: [{ maxFrameRate: 10 }]\n      },\n      audio: false\n    };\n    capture = p.createCapture(constraints, () => {});\n    capture.id(\"video_element\");\n    capture.size(1280, 720);\n    capture.hide();\n\n    cocoSsd\n      .load()\n      .then(model => {\n        try {\n          cocoSsdModel = model;\n        } catch (e) {\n          console.log(e);\n        }\n      })\n      .catch(e => {\n        console.log(\"Error occurred: \", e);\n      });\n  };\n\n  p.draw = async () => {\n    if (!capture) return;\n    p.background(255);\n    p.image(capture, 0, 0);\n    p.fill(0, 0, 0, 0);\n\n    cocoDrawings.map(drawing => {\n      if (drawing) {\n        p.textSize(20);\n        p.strokeWeight(1);\n        const textX = drawing.bbox[0] + drawing.bbox[2];\n        const textY = drawing.bbox[1] + drawing.bbox[3];\n\n        const confidenetext = \"Confidence: \" + drawing.score.toFixed(1);\n        const textWidth = p.textWidth(confidenetext);\n\n        const itemTextWidth = p.textWidth(drawing.class);\n        p.text(drawing.cass, textX - itemTextWidth - 10, textY - 50);\n        p.text(confidenetext, textX - textWidth - 10, textY - 10);\n        p.stroke(\"rgb(100%, 100%, 100%)\");\n        p.rect(\n          drawing.bbox[0],\n          drawing.bbox[1],\n          drawing.bbox[2],\n          drawing.bbox[3]\n        );\n      }\n    });\n\n    faceDrawings.map(drawing => {\n      if (drawing) {\n        p.textSize(15);\n        p.strokeWeight(1);\n\n        const textX = drawing.detection.box._x + drawing.detection.box._width;\n        const textY = drawing.detection.box._y + drawing.detection.box._height;\n\n        const confidenetext = \"Gender:\" + drawing.gender;\n        const textWidth = p.textWidth(confidenetext);\n        p.text(confidenetext, textX - textWidth, textY - 60);\n\n        const ageText = \"Age: \" + drawing.age.toFixed(0);\n        const ageTextWidth = p.textWidth(ageText);\n        p.text(ageText, textX - ageTextWidth, textY - 30);\n\n        const copiedExpression = drawing.expressions;\n        const expressions = Object.keys(copiedExpression).map(key => {\n          const value = copiedExpression[key];\n          return value;\n        });\n        const max = Math.max(...expressions);\n        const expression_value = Object.keys(copiedExpression).filter(key => {\n          return copiedExpression[key] === max;\n        })[0];\n\n        const expressionText = \"Mood: \" + expression_value;\n        const expressionWidth = p.textWidth(expressionText);\n        p.text(expressionText, textX - expressionWidth, textY - 10);\n\n        p.strokeWeight(4);\n        p.stroke(\"rgb(100%, 0%, 10%)\");\n        p.rect(\n          drawing.detection.box._x,\n          drawing.detection.box._y,\n          drawing.detection.box._width,\n          drawing.detection.box._height\n        );\n      }\n    });\n    faceapi\n      .detectAllFaces(capture.id())\n      .withAgeAndGender()\n      .withFaceExpressions()\n      .then(data => {\n        showFaceDetectionData(data);\n      });\n\n    if (capture.loadedmetadata) {\n      if (cocoSsdModel) {\n        cocoSsdModel\n          .detect(document.getElementById(\"video_element\"))\n          .then(showCocoSSDResults)\n          .catch(e => {\n            console.log(\"Exception: \", e);\n          });\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}